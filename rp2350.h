// generated by python3 svd.py
#pragma once
typedef __UINT32_TYPE__ uint32_t;
#define REG(addr) *(volatile uint32_t *)(addr)
#define __IO volatile

typedef struct {
  __IO uint32_t RESET;      // off 0x00000000
  __IO uint32_t WDSEL;      // off 0x00000004
  __IO uint32_t RESET_DONE; // off 0x00000008
} RESETS_TypeDef;
#define RESETS_BASE 0x40020000
#define RESETS ((RESETS_TypeDef *)RESETS_BASE)

typedef struct {
  __IO uint32_t FRCE_ON;  // off 0x00000000
  __IO uint32_t FRCE_OFF; // off 0x00000004
  __IO uint32_t WDSEL;    // off 0x00000008
  __IO uint32_t DONE;     // off 0x0000000c
} PSM_TypeDef;
#define PSM_BASE 0x40018000
#define PSM ((PSM_TypeDef *)PSM_BASE)

typedef struct {
  __IO uint32_t CLK_GPOUT0_CTRL;      // off 0x00000000
  __IO uint32_t CLK_GPOUT0_DIV;       // off 0x00000004
  __IO uint32_t CLK_GPOUT0_SELECTED;  // off 0x00000008
  __IO uint32_t CLK_GPOUT1_CTRL;      // off 0x0000000c
  __IO uint32_t CLK_GPOUT1_DIV;       // off 0x00000010
  __IO uint32_t CLK_GPOUT1_SELECTED;  // off 0x00000014
  __IO uint32_t CLK_GPOUT2_CTRL;      // off 0x00000018
  __IO uint32_t CLK_GPOUT2_DIV;       // off 0x0000001c
  __IO uint32_t CLK_GPOUT2_SELECTED;  // off 0x00000020
  __IO uint32_t CLK_GPOUT3_CTRL;      // off 0x00000024
  __IO uint32_t CLK_GPOUT3_DIV;       // off 0x00000028
  __IO uint32_t CLK_GPOUT3_SELECTED;  // off 0x0000002c
  __IO uint32_t CLK_REF_CTRL;         // off 0x00000030
  __IO uint32_t CLK_REF_DIV;          // off 0x00000034
  __IO uint32_t CLK_REF_SELECTED;     // off 0x00000038
  __IO uint32_t CLK_SYS_CTRL;         // off 0x0000003c
  __IO uint32_t CLK_SYS_DIV;          // off 0x00000040
  __IO uint32_t CLK_SYS_SELECTED;     // off 0x00000044
  __IO uint32_t CLK_PERI_CTRL;        // off 0x00000048
  __IO uint32_t CLK_PERI_DIV;         // off 0x0000004c
  __IO uint32_t CLK_PERI_SELECTED;    // off 0x00000050
  __IO uint32_t CLK_HSTX_CTRL;        // off 0x00000054
  __IO uint32_t CLK_HSTX_DIV;         // off 0x00000058
  __IO uint32_t CLK_HSTX_SELECTED;    // off 0x0000005c
  __IO uint32_t CLK_USB_CTRL;         // off 0x00000060
  __IO uint32_t CLK_USB_DIV;          // off 0x00000064
  __IO uint32_t CLK_USB_SELECTED;     // off 0x00000068
  __IO uint32_t CLK_ADC_CTRL;         // off 0x0000006c
  __IO uint32_t CLK_ADC_DIV;          // off 0x00000070
  __IO uint32_t CLK_ADC_SELECTED;     // off 0x00000074
  __IO uint32_t DFTCLK_XOSC_CTRL;     // off 0x00000078
  __IO uint32_t DFTCLK_ROSC_CTRL;     // off 0x0000007c
  __IO uint32_t DFTCLK_LPOSC_CTRL;    // off 0x00000080
  __IO uint32_t CLK_SYS_RESUS_CTRL;   // off 0x00000084
  __IO uint32_t CLK_SYS_RESUS_STATUS; // off 0x00000088
  __IO uint32_t FC0_REF_KHZ;          // off 0x0000008c
  __IO uint32_t FC0_MIN_KHZ;          // off 0x00000090
  __IO uint32_t FC0_MAX_KHZ;          // off 0x00000094
  __IO uint32_t FC0_DELAY;            // off 0x00000098
  __IO uint32_t FC0_INTERVAL;         // off 0x0000009c
  __IO uint32_t FC0_SRC;              // off 0x000000a0
  __IO uint32_t FC0_STATUS;           // off 0x000000a4
  __IO uint32_t FC0_RESULT;           // off 0x000000a8
  __IO uint32_t WAKE_EN0;             // off 0x000000ac
  __IO uint32_t WAKE_EN1;             // off 0x000000b0
  __IO uint32_t SLEEP_EN0;            // off 0x000000b4
  __IO uint32_t SLEEP_EN1;            // off 0x000000b8
  __IO uint32_t ENABLED0;             // off 0x000000bc
  __IO uint32_t ENABLED1;             // off 0x000000c0
  __IO uint32_t INTR;                 // off 0x000000c4
  __IO uint32_t INTE;                 // off 0x000000c8
  __IO uint32_t INTF;                 // off 0x000000cc
  __IO uint32_t INTS;                 // off 0x000000d0
} CLOCKS_TypeDef;
#define CLOCKS_BASE 0x40010000
#define CLOCKS ((CLOCKS_TypeDef *)CLOCKS_BASE)

typedef struct {
  __IO uint32_t PROC0_CTRL;      // off 0x00000000
  __IO uint32_t PROC0_CYCLES;    // off 0x00000004
  __IO uint32_t PROC0_COUNT;     // off 0x00000008
  __IO uint32_t PROC1_CTRL;      // off 0x0000000c
  __IO uint32_t PROC1_CYCLES;    // off 0x00000010
  __IO uint32_t PROC1_COUNT;     // off 0x00000014
  __IO uint32_t TIMER0_CTRL;     // off 0x00000018
  __IO uint32_t TIMER0_CYCLES;   // off 0x0000001c
  __IO uint32_t TIMER0_COUNT;    // off 0x00000020
  __IO uint32_t TIMER1_CTRL;     // off 0x00000024
  __IO uint32_t TIMER1_CYCLES;   // off 0x00000028
  __IO uint32_t TIMER1_COUNT;    // off 0x0000002c
  __IO uint32_t WATCHDOG_CTRL;   // off 0x00000030
  __IO uint32_t WATCHDOG_CYCLES; // off 0x00000034
  __IO uint32_t WATCHDOG_COUNT;  // off 0x00000038
  __IO uint32_t RISCV_CTRL;      // off 0x0000003c
  __IO uint32_t RISCV_CYCLES;    // off 0x00000040
  __IO uint32_t RISCV_COUNT;     // off 0x00000044
} TICKS_TypeDef;
#define TICKS_BASE 0x40108000
#define TICKS ((TICKS_TypeDef *)TICKS_BASE)

typedef struct {
  __IO uint32_t VOLTAGE_SELECT; // off 0x00000000
  __IO uint32_t GPIO0;          // off 0x00000004
  __IO uint32_t GPIO1;          // off 0x00000008
  __IO uint32_t GPIO2;          // off 0x0000000c
  __IO uint32_t GPIO3;          // off 0x00000010
  __IO uint32_t GPIO4;          // off 0x00000014
  __IO uint32_t GPIO5;          // off 0x00000018
  __IO uint32_t GPIO6;          // off 0x0000001c
  __IO uint32_t GPIO7;          // off 0x00000020
  __IO uint32_t GPIO8;          // off 0x00000024
  __IO uint32_t GPIO9;          // off 0x00000028
  __IO uint32_t GPIO10;         // off 0x0000002c
  __IO uint32_t GPIO11;         // off 0x00000030
  __IO uint32_t GPIO12;         // off 0x00000034
  __IO uint32_t GPIO13;         // off 0x00000038
  __IO uint32_t GPIO14;         // off 0x0000003c
  __IO uint32_t GPIO15;         // off 0x00000040
  __IO uint32_t GPIO16;         // off 0x00000044
  __IO uint32_t GPIO17;         // off 0x00000048
  __IO uint32_t GPIO18;         // off 0x0000004c
  __IO uint32_t GPIO19;         // off 0x00000050
  __IO uint32_t GPIO20;         // off 0x00000054
  __IO uint32_t GPIO21;         // off 0x00000058
  __IO uint32_t GPIO22;         // off 0x0000005c
  __IO uint32_t GPIO23;         // off 0x00000060
  __IO uint32_t GPIO24;         // off 0x00000064
  __IO uint32_t GPIO25;         // off 0x00000068
  __IO uint32_t GPIO26;         // off 0x0000006c
  __IO uint32_t GPIO27;         // off 0x00000070
  __IO uint32_t GPIO28;         // off 0x00000074
  __IO uint32_t GPIO29;         // off 0x00000078
  __IO uint32_t GPIO30;         // off 0x0000007c
  __IO uint32_t GPIO31;         // off 0x00000080
  __IO uint32_t GPIO32;         // off 0x00000084
  __IO uint32_t GPIO33;         // off 0x00000088
  __IO uint32_t GPIO34;         // off 0x0000008c
  __IO uint32_t GPIO35;         // off 0x00000090
  __IO uint32_t GPIO36;         // off 0x00000094
  __IO uint32_t GPIO37;         // off 0x00000098
  __IO uint32_t GPIO38;         // off 0x0000009c
  __IO uint32_t GPIO39;         // off 0x000000a0
  __IO uint32_t GPIO40;         // off 0x000000a4
  __IO uint32_t GPIO41;         // off 0x000000a8
  __IO uint32_t GPIO42;         // off 0x000000ac
  __IO uint32_t GPIO43;         // off 0x000000b0
  __IO uint32_t GPIO44;         // off 0x000000b4
  __IO uint32_t GPIO45;         // off 0x000000b8
  __IO uint32_t GPIO46;         // off 0x000000bc
  __IO uint32_t GPIO47;         // off 0x000000c0
  __IO uint32_t SWCLK;          // off 0x000000c4
  __IO uint32_t SWD;            // off 0x000000c8
} PADS_BANK0_TypeDef;
#define PADS_BANK0_BASE 0x40038000
#define PADS_BANK0 ((PADS_BANK0_TypeDef *)PADS_BANK0_BASE)

typedef struct {
  __IO uint32_t VOLTAGE_SELECT; // off 0x00000000
  __IO uint32_t GPIO_QSPI_SCLK; // off 0x00000004
  __IO uint32_t GPIO_QSPI_SD0;  // off 0x00000008
  __IO uint32_t GPIO_QSPI_SD1;  // off 0x0000000c
  __IO uint32_t GPIO_QSPI_SD2;  // off 0x00000010
  __IO uint32_t GPIO_QSPI_SD3;  // off 0x00000014
  __IO uint32_t GPIO_QSPI_SS;   // off 0x00000018
} PADS_QSPI_TypeDef;
#define PADS_QSPI_BASE 0x40040000
#define PADS_QSPI ((PADS_QSPI_TypeDef *)PADS_QSPI_BASE)

typedef struct {
  __IO uint32_t USBPHY_DP_STATUS;      // off 0x00000000
  __IO uint32_t USBPHY_DP_CTRL;        // off 0x00000004
  __IO uint32_t USBPHY_DM_STATUS;      // off 0x00000008
  __IO uint32_t USBPHY_DM_CTRL;        // off 0x0000000c
  __IO uint32_t GPIO_QSPI_SCLK_STATUS; // off 0x00000010
  __IO uint32_t GPIO_QSPI_SCLK_CTRL;   // off 0x00000014
  __IO uint32_t GPIO_QSPI_SS_STATUS;   // off 0x00000018
  __IO uint32_t GPIO_QSPI_SS_CTRL;     // off 0x0000001c
  __IO uint32_t GPIO_QSPI_SD0_STATUS;  // off 0x00000020
  __IO uint32_t GPIO_QSPI_SD0_CTRL;    // off 0x00000024
  __IO uint32_t GPIO_QSPI_SD1_STATUS;  // off 0x00000028
  __IO uint32_t GPIO_QSPI_SD1_CTRL;    // off 0x0000002c
  __IO uint32_t GPIO_QSPI_SD2_STATUS;  // off 0x00000030
  __IO uint32_t GPIO_QSPI_SD2_CTRL;    // off 0x00000034
  __IO uint32_t GPIO_QSPI_SD3_STATUS;  // off 0x00000038
  __IO uint32_t GPIO_QSPI_SD3_CTRL;    // off 0x0000003c
  __IO uint32_t _pad0[112];
  __IO uint32_t IRQSUMMARY_PROC0_SECURE;           // off 0x00000200
  __IO uint32_t IRQSUMMARY_PROC0_NONSECURE;        // off 0x00000204
  __IO uint32_t IRQSUMMARY_PROC1_SECURE;           // off 0x00000208
  __IO uint32_t IRQSUMMARY_PROC1_NONSECURE;        // off 0x0000020c
  __IO uint32_t IRQSUMMARY_DORMANT_WAKE_SECURE;    // off 0x00000210
  __IO uint32_t IRQSUMMARY_DORMANT_WAKE_NONSECURE; // off 0x00000214
  __IO uint32_t INTR;                              // off 0x00000218
  __IO uint32_t PROC0_INTE;                        // off 0x0000021c
  __IO uint32_t PROC0_INTF;                        // off 0x00000220
  __IO uint32_t PROC0_INTS;                        // off 0x00000224
  __IO uint32_t PROC1_INTE;                        // off 0x00000228
  __IO uint32_t PROC1_INTF;                        // off 0x0000022c
  __IO uint32_t PROC1_INTS;                        // off 0x00000230
  __IO uint32_t DORMANT_WAKE_INTE;                 // off 0x00000234
  __IO uint32_t DORMANT_WAKE_INTF;                 // off 0x00000238
  __IO uint32_t DORMANT_WAKE_INTS;                 // off 0x0000023c
} IO_QSPI_TypeDef;
#define IO_QSPI_BASE 0x40030000
#define IO_QSPI ((IO_QSPI_TypeDef *)IO_QSPI_BASE)

typedef struct {
  __IO uint32_t GPIO0_STATUS;  // off 0x00000000
  __IO uint32_t GPIO0_CTRL;    // off 0x00000004
  __IO uint32_t GPIO1_STATUS;  // off 0x00000008
  __IO uint32_t GPIO1_CTRL;    // off 0x0000000c
  __IO uint32_t GPIO2_STATUS;  // off 0x00000010
  __IO uint32_t GPIO2_CTRL;    // off 0x00000014
  __IO uint32_t GPIO3_STATUS;  // off 0x00000018
  __IO uint32_t GPIO3_CTRL;    // off 0x0000001c
  __IO uint32_t GPIO4_STATUS;  // off 0x00000020
  __IO uint32_t GPIO4_CTRL;    // off 0x00000024
  __IO uint32_t GPIO5_STATUS;  // off 0x00000028
  __IO uint32_t GPIO5_CTRL;    // off 0x0000002c
  __IO uint32_t GPIO6_STATUS;  // off 0x00000030
  __IO uint32_t GPIO6_CTRL;    // off 0x00000034
  __IO uint32_t GPIO7_STATUS;  // off 0x00000038
  __IO uint32_t GPIO7_CTRL;    // off 0x0000003c
  __IO uint32_t GPIO8_STATUS;  // off 0x00000040
  __IO uint32_t GPIO8_CTRL;    // off 0x00000044
  __IO uint32_t GPIO9_STATUS;  // off 0x00000048
  __IO uint32_t GPIO9_CTRL;    // off 0x0000004c
  __IO uint32_t GPIO10_STATUS; // off 0x00000050
  __IO uint32_t GPIO10_CTRL;   // off 0x00000054
  __IO uint32_t GPIO11_STATUS; // off 0x00000058
  __IO uint32_t GPIO11_CTRL;   // off 0x0000005c
  __IO uint32_t GPIO12_STATUS; // off 0x00000060
  __IO uint32_t GPIO12_CTRL;   // off 0x00000064
  __IO uint32_t GPIO13_STATUS; // off 0x00000068
  __IO uint32_t GPIO13_CTRL;   // off 0x0000006c
  __IO uint32_t GPIO14_STATUS; // off 0x00000070
  __IO uint32_t GPIO14_CTRL;   // off 0x00000074
  __IO uint32_t GPIO15_STATUS; // off 0x00000078
  __IO uint32_t GPIO15_CTRL;   // off 0x0000007c
  __IO uint32_t GPIO16_STATUS; // off 0x00000080
  __IO uint32_t GPIO16_CTRL;   // off 0x00000084
  __IO uint32_t GPIO17_STATUS; // off 0x00000088
  __IO uint32_t GPIO17_CTRL;   // off 0x0000008c
  __IO uint32_t GPIO18_STATUS; // off 0x00000090
  __IO uint32_t GPIO18_CTRL;   // off 0x00000094
  __IO uint32_t GPIO19_STATUS; // off 0x00000098
  __IO uint32_t GPIO19_CTRL;   // off 0x0000009c
  __IO uint32_t GPIO20_STATUS; // off 0x000000a0
  __IO uint32_t GPIO20_CTRL;   // off 0x000000a4
  __IO uint32_t GPIO21_STATUS; // off 0x000000a8
  __IO uint32_t GPIO21_CTRL;   // off 0x000000ac
  __IO uint32_t GPIO22_STATUS; // off 0x000000b0
  __IO uint32_t GPIO22_CTRL;   // off 0x000000b4
  __IO uint32_t GPIO23_STATUS; // off 0x000000b8
  __IO uint32_t GPIO23_CTRL;   // off 0x000000bc
  __IO uint32_t GPIO24_STATUS; // off 0x000000c0
  __IO uint32_t GPIO24_CTRL;   // off 0x000000c4
  __IO uint32_t GPIO25_STATUS; // off 0x000000c8
  __IO uint32_t GPIO25_CTRL;   // off 0x000000cc
  __IO uint32_t GPIO26_STATUS; // off 0x000000d0
  __IO uint32_t GPIO26_CTRL;   // off 0x000000d4
  __IO uint32_t GPIO27_STATUS; // off 0x000000d8
  __IO uint32_t GPIO27_CTRL;   // off 0x000000dc
  __IO uint32_t GPIO28_STATUS; // off 0x000000e0
  __IO uint32_t GPIO28_CTRL;   // off 0x000000e4
  __IO uint32_t GPIO29_STATUS; // off 0x000000e8
  __IO uint32_t GPIO29_CTRL;   // off 0x000000ec
  __IO uint32_t GPIO30_STATUS; // off 0x000000f0
  __IO uint32_t GPIO30_CTRL;   // off 0x000000f4
  __IO uint32_t GPIO31_STATUS; // off 0x000000f8
  __IO uint32_t GPIO31_CTRL;   // off 0x000000fc
  __IO uint32_t GPIO32_STATUS; // off 0x00000100
  __IO uint32_t GPIO32_CTRL;   // off 0x00000104
  __IO uint32_t GPIO33_STATUS; // off 0x00000108
  __IO uint32_t GPIO33_CTRL;   // off 0x0000010c
  __IO uint32_t GPIO34_STATUS; // off 0x00000110
  __IO uint32_t GPIO34_CTRL;   // off 0x00000114
  __IO uint32_t GPIO35_STATUS; // off 0x00000118
  __IO uint32_t GPIO35_CTRL;   // off 0x0000011c
  __IO uint32_t GPIO36_STATUS; // off 0x00000120
  __IO uint32_t GPIO36_CTRL;   // off 0x00000124
  __IO uint32_t GPIO37_STATUS; // off 0x00000128
  __IO uint32_t GPIO37_CTRL;   // off 0x0000012c
  __IO uint32_t GPIO38_STATUS; // off 0x00000130
  __IO uint32_t GPIO38_CTRL;   // off 0x00000134
  __IO uint32_t GPIO39_STATUS; // off 0x00000138
  __IO uint32_t GPIO39_CTRL;   // off 0x0000013c
  __IO uint32_t GPIO40_STATUS; // off 0x00000140
  __IO uint32_t GPIO40_CTRL;   // off 0x00000144
  __IO uint32_t GPIO41_STATUS; // off 0x00000148
  __IO uint32_t GPIO41_CTRL;   // off 0x0000014c
  __IO uint32_t GPIO42_STATUS; // off 0x00000150
  __IO uint32_t GPIO42_CTRL;   // off 0x00000154
  __IO uint32_t GPIO43_STATUS; // off 0x00000158
  __IO uint32_t GPIO43_CTRL;   // off 0x0000015c
  __IO uint32_t GPIO44_STATUS; // off 0x00000160
  __IO uint32_t GPIO44_CTRL;   // off 0x00000164
  __IO uint32_t GPIO45_STATUS; // off 0x00000168
  __IO uint32_t GPIO45_CTRL;   // off 0x0000016c
  __IO uint32_t GPIO46_STATUS; // off 0x00000170
  __IO uint32_t GPIO46_CTRL;   // off 0x00000174
  __IO uint32_t GPIO47_STATUS; // off 0x00000178
  __IO uint32_t GPIO47_CTRL;   // off 0x0000017c
  __IO uint32_t _pad0[32];
  __IO uint32_t IRQSUMMARY_PROC0_SECURE0;           // off 0x00000200
  __IO uint32_t IRQSUMMARY_PROC0_SECURE1;           // off 0x00000204
  __IO uint32_t IRQSUMMARY_PROC0_NONSECURE0;        // off 0x00000208
  __IO uint32_t IRQSUMMARY_PROC0_NONSECURE1;        // off 0x0000020c
  __IO uint32_t IRQSUMMARY_PROC1_SECURE0;           // off 0x00000210
  __IO uint32_t IRQSUMMARY_PROC1_SECURE1;           // off 0x00000214
  __IO uint32_t IRQSUMMARY_PROC1_NONSECURE0;        // off 0x00000218
  __IO uint32_t IRQSUMMARY_PROC1_NONSECURE1;        // off 0x0000021c
  __IO uint32_t IRQSUMMARY_DORMANT_WAKE_SECURE0;    // off 0x00000220
  __IO uint32_t IRQSUMMARY_DORMANT_WAKE_SECURE1;    // off 0x00000224
  __IO uint32_t IRQSUMMARY_DORMANT_WAKE_NONSECURE0; // off 0x00000228
  __IO uint32_t IRQSUMMARY_DORMANT_WAKE_NONSECURE1; // off 0x0000022c
  __IO uint32_t INTR0;                              // off 0x00000230
  __IO uint32_t INTR1;                              // off 0x00000234
  __IO uint32_t INTR2;                              // off 0x00000238
  __IO uint32_t INTR3;                              // off 0x0000023c
  __IO uint32_t INTR4;                              // off 0x00000240
  __IO uint32_t INTR5;                              // off 0x00000244
  __IO uint32_t PROC0_INTE0;                        // off 0x00000248
  __IO uint32_t PROC0_INTE1;                        // off 0x0000024c
  __IO uint32_t PROC0_INTE2;                        // off 0x00000250
  __IO uint32_t PROC0_INTE3;                        // off 0x00000254
  __IO uint32_t PROC0_INTE4;                        // off 0x00000258
  __IO uint32_t PROC0_INTE5;                        // off 0x0000025c
  __IO uint32_t PROC0_INTF0;                        // off 0x00000260
  __IO uint32_t PROC0_INTF1;                        // off 0x00000264
  __IO uint32_t PROC0_INTF2;                        // off 0x00000268
  __IO uint32_t PROC0_INTF3;                        // off 0x0000026c
  __IO uint32_t PROC0_INTF4;                        // off 0x00000270
  __IO uint32_t PROC0_INTF5;                        // off 0x00000274
  __IO uint32_t PROC0_INTS0;                        // off 0x00000278
  __IO uint32_t PROC0_INTS1;                        // off 0x0000027c
  __IO uint32_t PROC0_INTS2;                        // off 0x00000280
  __IO uint32_t PROC0_INTS3;                        // off 0x00000284
  __IO uint32_t PROC0_INTS4;                        // off 0x00000288
  __IO uint32_t PROC0_INTS5;                        // off 0x0000028c
  __IO uint32_t PROC1_INTE0;                        // off 0x00000290
  __IO uint32_t PROC1_INTE1;                        // off 0x00000294
  __IO uint32_t PROC1_INTE2;                        // off 0x00000298
  __IO uint32_t PROC1_INTE3;                        // off 0x0000029c
  __IO uint32_t PROC1_INTE4;                        // off 0x000002a0
  __IO uint32_t PROC1_INTE5;                        // off 0x000002a4
  __IO uint32_t PROC1_INTF0;                        // off 0x000002a8
  __IO uint32_t PROC1_INTF1;                        // off 0x000002ac
  __IO uint32_t PROC1_INTF2;                        // off 0x000002b0
  __IO uint32_t PROC1_INTF3;                        // off 0x000002b4
  __IO uint32_t PROC1_INTF4;                        // off 0x000002b8
  __IO uint32_t PROC1_INTF5;                        // off 0x000002bc
  __IO uint32_t PROC1_INTS0;                        // off 0x000002c0
  __IO uint32_t PROC1_INTS1;                        // off 0x000002c4
  __IO uint32_t PROC1_INTS2;                        // off 0x000002c8
  __IO uint32_t PROC1_INTS3;                        // off 0x000002cc
  __IO uint32_t PROC1_INTS4;                        // off 0x000002d0
  __IO uint32_t PROC1_INTS5;                        // off 0x000002d4
  __IO uint32_t DORMANT_WAKE_INTE0;                 // off 0x000002d8
  __IO uint32_t DORMANT_WAKE_INTE1;                 // off 0x000002dc
  __IO uint32_t DORMANT_WAKE_INTE2;                 // off 0x000002e0
  __IO uint32_t DORMANT_WAKE_INTE3;                 // off 0x000002e4
  __IO uint32_t DORMANT_WAKE_INTE4;                 // off 0x000002e8
  __IO uint32_t DORMANT_WAKE_INTE5;                 // off 0x000002ec
  __IO uint32_t DORMANT_WAKE_INTF0;                 // off 0x000002f0
  __IO uint32_t DORMANT_WAKE_INTF1;                 // off 0x000002f4
  __IO uint32_t DORMANT_WAKE_INTF2;                 // off 0x000002f8
  __IO uint32_t DORMANT_WAKE_INTF3;                 // off 0x000002fc
  __IO uint32_t DORMANT_WAKE_INTF4;                 // off 0x00000300
  __IO uint32_t DORMANT_WAKE_INTF5;                 // off 0x00000304
  __IO uint32_t DORMANT_WAKE_INTS0;                 // off 0x00000308
  __IO uint32_t DORMANT_WAKE_INTS1;                 // off 0x0000030c
  __IO uint32_t DORMANT_WAKE_INTS2;                 // off 0x00000310
  __IO uint32_t DORMANT_WAKE_INTS3;                 // off 0x00000314
  __IO uint32_t DORMANT_WAKE_INTS4;                 // off 0x00000318
  __IO uint32_t DORMANT_WAKE_INTS5;                 // off 0x0000031c
} IO_BANK0_TypeDef;
#define IO_BANK0_BASE 0x40028000
#define IO_BANK0 ((IO_BANK0_TypeDef *)IO_BANK0_BASE)

typedef struct {
  __IO uint32_t CHIP_ID;     // off 0x00000000
  __IO uint32_t PACKAGE_SEL; // off 0x00000004
  __IO uint32_t PLATFORM;    // off 0x00000008
  __IO uint32_t _pad0[2];
  __IO uint32_t GITREF_RP2350; // off 0x00000014
} SYSINFO_TypeDef;
#define SYSINFO_BASE 0x40000000
#define SYSINFO ((SYSINFO_TypeDef *)SYSINFO_BASE)

typedef struct {
  __IO uint32_t CSR;   // off 0x00000000
  __IO uint32_t WDATA; // off 0x00000004
  __IO uint32_t SUM0;  // off 0x00000008
  __IO uint32_t SUM1;  // off 0x0000000c
  __IO uint32_t SUM2;  // off 0x00000010
  __IO uint32_t SUM3;  // off 0x00000014
  __IO uint32_t SUM4;  // off 0x00000018
  __IO uint32_t SUM5;  // off 0x0000001c
  __IO uint32_t SUM6;  // off 0x00000020
  __IO uint32_t SUM7;  // off 0x00000024
} SHA256_TypeDef;
#define SHA256_BASE 0x400f8000
#define SHA256 ((SHA256_TypeDef *)SHA256_BASE)

typedef struct {
  __IO uint32_t STAT; // off 0x00000000
  __IO uint32_t FIFO; // off 0x00000004
} HSTX_FIFO_TypeDef;
#define HSTX_FIFO_BASE 0x50600000
#define HSTX_FIFO ((HSTX_FIFO_TypeDef *)HSTX_FIFO_BASE)

typedef struct {
  __IO uint32_t CSR;          // off 0x00000000
  __IO uint32_t BIT0;         // off 0x00000004
  __IO uint32_t BIT1;         // off 0x00000008
  __IO uint32_t BIT2;         // off 0x0000000c
  __IO uint32_t BIT3;         // off 0x00000010
  __IO uint32_t BIT4;         // off 0x00000014
  __IO uint32_t BIT5;         // off 0x00000018
  __IO uint32_t BIT6;         // off 0x0000001c
  __IO uint32_t BIT7;         // off 0x00000020
  __IO uint32_t EXPAND_SHIFT; // off 0x00000024
  __IO uint32_t EXPAND_TMDS;  // off 0x00000028
} HSTX_CTRL_TypeDef;
#define HSTX_CTRL_BASE 0x400c0000
#define HSTX_CTRL ((HSTX_CTRL_TypeDef *)HSTX_CTRL_BASE)

typedef struct {
  __IO uint32_t NMI_MASK0; // off 0x00000000
  __IO uint32_t NMI_MASK1; // off 0x00000004
  __IO uint32_t SLEEPCTRL; // off 0x00000008
} EPPB_TypeDef;
#define EPPB_BASE 0xe0080000
#define EPPB ((EPPB_TypeDef *)EPPB_BASE)

typedef struct {
  __IO uint32_t ITM_STIM0;  // off 0x00000000
  __IO uint32_t ITM_STIM1;  // off 0x00000004
  __IO uint32_t ITM_STIM2;  // off 0x00000008
  __IO uint32_t ITM_STIM3;  // off 0x0000000c
  __IO uint32_t ITM_STIM4;  // off 0x00000010
  __IO uint32_t ITM_STIM5;  // off 0x00000014
  __IO uint32_t ITM_STIM6;  // off 0x00000018
  __IO uint32_t ITM_STIM7;  // off 0x0000001c
  __IO uint32_t ITM_STIM8;  // off 0x00000020
  __IO uint32_t ITM_STIM9;  // off 0x00000024
  __IO uint32_t ITM_STIM10; // off 0x00000028
  __IO uint32_t ITM_STIM11; // off 0x0000002c
  __IO uint32_t ITM_STIM12; // off 0x00000030
  __IO uint32_t ITM_STIM13; // off 0x00000034
  __IO uint32_t ITM_STIM14; // off 0x00000038
  __IO uint32_t ITM_STIM15; // off 0x0000003c
  __IO uint32_t ITM_STIM16; // off 0x00000040
  __IO uint32_t ITM_STIM17; // off 0x00000044
  __IO uint32_t ITM_STIM18; // off 0x00000048
  __IO uint32_t ITM_STIM19; // off 0x0000004c
  __IO uint32_t ITM_STIM20; // off 0x00000050
  __IO uint32_t ITM_STIM21; // off 0x00000054
  __IO uint32_t ITM_STIM22; // off 0x00000058
  __IO uint32_t ITM_STIM23; // off 0x0000005c
  __IO uint32_t ITM_STIM24; // off 0x00000060
  __IO uint32_t ITM_STIM25; // off 0x00000064
  __IO uint32_t ITM_STIM26; // off 0x00000068
  __IO uint32_t ITM_STIM27; // off 0x0000006c
  __IO uint32_t ITM_STIM28; // off 0x00000070
  __IO uint32_t ITM_STIM29; // off 0x00000074
  __IO uint32_t ITM_STIM30; // off 0x00000078
  __IO uint32_t ITM_STIM31; // off 0x0000007c
  __IO uint32_t _pad0[864];
  __IO uint32_t ITM_TER0; // off 0x00000e00
  __IO uint32_t _pad1[15];
  __IO uint32_t ITM_TPR; // off 0x00000e40
  __IO uint32_t _pad2[15];
  __IO uint32_t ITM_TCR; // off 0x00000e80
  __IO uint32_t _pad3[27];
  __IO uint32_t INT_ATREADY; // off 0x00000ef0
  __IO uint32_t _pad4;
  __IO uint32_t INT_ATVALID; // off 0x00000ef8
  __IO uint32_t _pad5;
  __IO uint32_t ITM_ITCTRL; // off 0x00000f00
  __IO uint32_t _pad6[46];
  __IO uint32_t ITM_DEVARCH; // off 0x00000fbc
  __IO uint32_t _pad7[3];
  __IO uint32_t ITM_DEVTYPE; // off 0x00000fcc
  __IO uint32_t ITM_PIDR4;   // off 0x00000fd0
  __IO uint32_t ITM_PIDR5;   // off 0x00000fd4
  __IO uint32_t ITM_PIDR6;   // off 0x00000fd8
  __IO uint32_t ITM_PIDR7;   // off 0x00000fdc
  __IO uint32_t ITM_PIDR0;   // off 0x00000fe0
  __IO uint32_t ITM_PIDR1;   // off 0x00000fe4
  __IO uint32_t ITM_PIDR2;   // off 0x00000fe8
  __IO uint32_t ITM_PIDR3;   // off 0x00000fec
  __IO uint32_t ITM_CIDR0;   // off 0x00000ff0
  __IO uint32_t ITM_CIDR1;   // off 0x00000ff4
  __IO uint32_t ITM_CIDR2;   // off 0x00000ff8
  __IO uint32_t ITM_CIDR3;   // off 0x00000ffc
  __IO uint32_t DWT_CTRL;    // off 0x00001000
  __IO uint32_t DWT_CYCCNT;  // off 0x00001004
  __IO uint32_t _pad8;
  __IO uint32_t DWT_EXCCNT; // off 0x0000100c
  __IO uint32_t _pad9;
  __IO uint32_t DWT_LSUCNT;  // off 0x00001014
  __IO uint32_t DWT_FOLDCNT; // off 0x00001018
  __IO uint32_t _pad10;
  __IO uint32_t DWT_COMP0; // off 0x00001020
  __IO uint32_t _pad11;
  __IO uint32_t DWT_FUNCTION0; // off 0x00001028
  __IO uint32_t _pad12;
  __IO uint32_t DWT_COMP1; // off 0x00001030
  __IO uint32_t _pad13;
  __IO uint32_t DWT_FUNCTION1; // off 0x00001038
  __IO uint32_t _pad14;
  __IO uint32_t DWT_COMP2; // off 0x00001040
  __IO uint32_t _pad15;
  __IO uint32_t DWT_FUNCTION2; // off 0x00001048
  __IO uint32_t _pad16;
  __IO uint32_t DWT_COMP3; // off 0x00001050
  __IO uint32_t _pad17;
  __IO uint32_t DWT_FUNCTION3; // off 0x00001058
  __IO uint32_t _pad18[984];
  __IO uint32_t DWT_DEVARCH; // off 0x00001fbc
  __IO uint32_t _pad19[3];
  __IO uint32_t DWT_DEVTYPE; // off 0x00001fcc
  __IO uint32_t DWT_PIDR4;   // off 0x00001fd0
  __IO uint32_t DWT_PIDR5;   // off 0x00001fd4
  __IO uint32_t DWT_PIDR6;   // off 0x00001fd8
  __IO uint32_t DWT_PIDR7;   // off 0x00001fdc
  __IO uint32_t DWT_PIDR0;   // off 0x00001fe0
  __IO uint32_t DWT_PIDR1;   // off 0x00001fe4
  __IO uint32_t DWT_PIDR2;   // off 0x00001fe8
  __IO uint32_t DWT_PIDR3;   // off 0x00001fec
  __IO uint32_t DWT_CIDR0;   // off 0x00001ff0
  __IO uint32_t DWT_CIDR1;   // off 0x00001ff4
  __IO uint32_t DWT_CIDR2;   // off 0x00001ff8
  __IO uint32_t DWT_CIDR3;   // off 0x00001ffc
  __IO uint32_t FP_CTRL;     // off 0x00002000
  __IO uint32_t FP_REMAP;    // off 0x00002004
  __IO uint32_t FP_COMP0;    // off 0x00002008
  __IO uint32_t FP_COMP1;    // off 0x0000200c
  __IO uint32_t FP_COMP2;    // off 0x00002010
  __IO uint32_t FP_COMP3;    // off 0x00002014
  __IO uint32_t FP_COMP4;    // off 0x00002018
  __IO uint32_t FP_COMP5;    // off 0x0000201c
  __IO uint32_t FP_COMP6;    // off 0x00002020
  __IO uint32_t FP_COMP7;    // off 0x00002024
  __IO uint32_t _pad20[997];
  __IO uint32_t FP_DEVARCH; // off 0x00002fbc
  __IO uint32_t _pad21[3];
  __IO uint32_t FP_DEVTYPE; // off 0x00002fcc
  __IO uint32_t FP_PIDR4;   // off 0x00002fd0
  __IO uint32_t FP_PIDR5;   // off 0x00002fd4
  __IO uint32_t FP_PIDR6;   // off 0x00002fd8
  __IO uint32_t FP_PIDR7;   // off 0x00002fdc
  __IO uint32_t FP_PIDR0;   // off 0x00002fe0
  __IO uint32_t FP_PIDR1;   // off 0x00002fe4
  __IO uint32_t FP_PIDR2;   // off 0x00002fe8
  __IO uint32_t FP_PIDR3;   // off 0x00002fec
  __IO uint32_t FP_CIDR0;   // off 0x00002ff0
  __IO uint32_t FP_CIDR1;   // off 0x00002ff4
  __IO uint32_t FP_CIDR2;   // off 0x00002ff8
  __IO uint32_t FP_CIDR3;   // off 0x00002ffc
  __IO uint32_t _pad22[11265];
  __IO uint32_t ICTR;  // off 0x0000e004
  __IO uint32_t ACTLR; // off 0x0000e008
  __IO uint32_t _pad23;
  __IO uint32_t SYST_CSR;   // off 0x0000e010
  __IO uint32_t SYST_RVR;   // off 0x0000e014
  __IO uint32_t SYST_CVR;   // off 0x0000e018
  __IO uint32_t SYST_CALIB; // off 0x0000e01c
  __IO uint32_t _pad24[56];
  __IO uint32_t NVIC_ISER0; // off 0x0000e100
  __IO uint32_t NVIC_ISER1; // off 0x0000e104
  __IO uint32_t _pad25[30];
  __IO uint32_t NVIC_ICER0; // off 0x0000e180
  __IO uint32_t NVIC_ICER1; // off 0x0000e184
  __IO uint32_t _pad26[30];
  __IO uint32_t NVIC_ISPR0; // off 0x0000e200
  __IO uint32_t NVIC_ISPR1; // off 0x0000e204
  __IO uint32_t _pad27[30];
  __IO uint32_t NVIC_ICPR0; // off 0x0000e280
  __IO uint32_t NVIC_ICPR1; // off 0x0000e284
  __IO uint32_t _pad28[30];
  __IO uint32_t NVIC_IABR0; // off 0x0000e300
  __IO uint32_t NVIC_IABR1; // off 0x0000e304
  __IO uint32_t _pad29[30];
  __IO uint32_t NVIC_ITNS0; // off 0x0000e380
  __IO uint32_t NVIC_ITNS1; // off 0x0000e384
  __IO uint32_t _pad30[30];
  __IO uint32_t NVIC_IPR0;  // off 0x0000e400
  __IO uint32_t NVIC_IPR1;  // off 0x0000e404
  __IO uint32_t NVIC_IPR2;  // off 0x0000e408
  __IO uint32_t NVIC_IPR3;  // off 0x0000e40c
  __IO uint32_t NVIC_IPR4;  // off 0x0000e410
  __IO uint32_t NVIC_IPR5;  // off 0x0000e414
  __IO uint32_t NVIC_IPR6;  // off 0x0000e418
  __IO uint32_t NVIC_IPR7;  // off 0x0000e41c
  __IO uint32_t NVIC_IPR8;  // off 0x0000e420
  __IO uint32_t NVIC_IPR9;  // off 0x0000e424
  __IO uint32_t NVIC_IPR10; // off 0x0000e428
  __IO uint32_t NVIC_IPR11; // off 0x0000e42c
  __IO uint32_t NVIC_IPR12; // off 0x0000e430
  __IO uint32_t NVIC_IPR13; // off 0x0000e434
  __IO uint32_t NVIC_IPR14; // off 0x0000e438
  __IO uint32_t NVIC_IPR15; // off 0x0000e43c
  __IO uint32_t _pad31[560];
  __IO uint32_t CPUID; // off 0x0000ed00
  __IO uint32_t ICSR;  // off 0x0000ed04
  __IO uint32_t VTOR;  // off 0x0000ed08
  __IO uint32_t AIRCR; // off 0x0000ed0c
  __IO uint32_t SCR;   // off 0x0000ed10
  __IO uint32_t CCR;   // off 0x0000ed14
  __IO uint32_t SHPR1; // off 0x0000ed18
  __IO uint32_t SHPR2; // off 0x0000ed1c
  __IO uint32_t SHPR3; // off 0x0000ed20
  __IO uint32_t SHCSR; // off 0x0000ed24
  __IO uint32_t CFSR;  // off 0x0000ed28
  __IO uint32_t HFSR;  // off 0x0000ed2c
  __IO uint32_t DFSR;  // off 0x0000ed30
  __IO uint32_t MMFAR; // off 0x0000ed34
  __IO uint32_t BFAR;  // off 0x0000ed38
  __IO uint32_t _pad32;
  __IO uint32_t ID_PFR0;  // off 0x0000ed40
  __IO uint32_t ID_PFR1;  // off 0x0000ed44
  __IO uint32_t ID_DFR0;  // off 0x0000ed48
  __IO uint32_t ID_AFR0;  // off 0x0000ed4c
  __IO uint32_t ID_MMFR0; // off 0x0000ed50
  __IO uint32_t ID_MMFR1; // off 0x0000ed54
  __IO uint32_t ID_MMFR2; // off 0x0000ed58
  __IO uint32_t ID_MMFR3; // off 0x0000ed5c
  __IO uint32_t ID_ISAR0; // off 0x0000ed60
  __IO uint32_t ID_ISAR1; // off 0x0000ed64
  __IO uint32_t ID_ISAR2; // off 0x0000ed68
  __IO uint32_t ID_ISAR3; // off 0x0000ed6c
  __IO uint32_t ID_ISAR4; // off 0x0000ed70
  __IO uint32_t ID_ISAR5; // off 0x0000ed74
  __IO uint32_t _pad33;
  __IO uint32_t CTR; // off 0x0000ed7c
  __IO uint32_t _pad34[2];
  __IO uint32_t CPACR;       // off 0x0000ed88
  __IO uint32_t NSACR;       // off 0x0000ed8c
  __IO uint32_t MPU_TYPE;    // off 0x0000ed90
  __IO uint32_t MPU_CTRL;    // off 0x0000ed94
  __IO uint32_t MPU_RNR;     // off 0x0000ed98
  __IO uint32_t MPU_RBAR;    // off 0x0000ed9c
  __IO uint32_t MPU_RLAR;    // off 0x0000eda0
  __IO uint32_t MPU_RBAR_A1; // off 0x0000eda4
  __IO uint32_t MPU_RLAR_A1; // off 0x0000eda8
  __IO uint32_t MPU_RBAR_A2; // off 0x0000edac
  __IO uint32_t MPU_RLAR_A2; // off 0x0000edb0
  __IO uint32_t MPU_RBAR_A3; // off 0x0000edb4
  __IO uint32_t MPU_RLAR_A3; // off 0x0000edb8
  __IO uint32_t _pad35;
  __IO uint32_t MPU_MAIR0; // off 0x0000edc0
  __IO uint32_t MPU_MAIR1; // off 0x0000edc4
  __IO uint32_t _pad36[2];
  __IO uint32_t SAU_CTRL; // off 0x0000edd0
  __IO uint32_t SAU_TYPE; // off 0x0000edd4
  __IO uint32_t SAU_RNR;  // off 0x0000edd8
  __IO uint32_t SAU_RBAR; // off 0x0000eddc
  __IO uint32_t SAU_RLAR; // off 0x0000ede0
  __IO uint32_t SFSR;     // off 0x0000ede4
  __IO uint32_t SFAR;     // off 0x0000ede8
  __IO uint32_t _pad37;
  __IO uint32_t DHCSR; // off 0x0000edf0
  __IO uint32_t DCRSR; // off 0x0000edf4
  __IO uint32_t DCRDR; // off 0x0000edf8
  __IO uint32_t DEMCR; // off 0x0000edfc
  __IO uint32_t _pad38[2];
  __IO uint32_t DSCSR; // off 0x0000ee08
  __IO uint32_t _pad39[61];
  __IO uint32_t STIR; // off 0x0000ef00
  __IO uint32_t _pad40[12];
  __IO uint32_t FPCCR;  // off 0x0000ef34
  __IO uint32_t FPCAR;  // off 0x0000ef38
  __IO uint32_t FPDSCR; // off 0x0000ef3c
  __IO uint32_t MVFR0;  // off 0x0000ef40
  __IO uint32_t MVFR1;  // off 0x0000ef44
  __IO uint32_t MVFR2;  // off 0x0000ef48
  __IO uint32_t _pad41[28];
  __IO uint32_t DDEVARCH; // off 0x0000efbc
  __IO uint32_t _pad42[3];
  __IO uint32_t DDEVTYPE; // off 0x0000efcc
  __IO uint32_t DPIDR4;   // off 0x0000efd0
  __IO uint32_t DPIDR5;   // off 0x0000efd4
  __IO uint32_t DPIDR6;   // off 0x0000efd8
  __IO uint32_t DPIDR7;   // off 0x0000efdc
  __IO uint32_t DPIDR0;   // off 0x0000efe0
  __IO uint32_t DPIDR1;   // off 0x0000efe4
  __IO uint32_t DPIDR2;   // off 0x0000efe8
  __IO uint32_t DPIDR3;   // off 0x0000efec
  __IO uint32_t DCIDR0;   // off 0x0000eff0
  __IO uint32_t DCIDR1;   // off 0x0000eff4
  __IO uint32_t DCIDR2;   // off 0x0000eff8
  __IO uint32_t DCIDR3;   // off 0x0000effc
  __IO uint32_t _pad43[51201];
  __IO uint32_t TRCPRGCTLR; // off 0x00041004
  __IO uint32_t _pad44;
  __IO uint32_t TRCSTATR;   // off 0x0004100c
  __IO uint32_t TRCCONFIGR; // off 0x00041010
  __IO uint32_t _pad45[3];
  __IO uint32_t TRCEVENTCTL0R; // off 0x00041020
  __IO uint32_t TRCEVENTCTL1R; // off 0x00041024
  __IO uint32_t _pad46;
  __IO uint32_t TRCSTALLCTLR; // off 0x0004102c
  __IO uint32_t TRCTSCTLR;    // off 0x00041030
  __IO uint32_t TRCSYNCPR;    // off 0x00041034
  __IO uint32_t TRCCCCTLR;    // off 0x00041038
  __IO uint32_t _pad47[17];
  __IO uint32_t TRCVICTLR; // off 0x00041080
  __IO uint32_t _pad48[47];
  __IO uint32_t TRCCNTRLDVR0; // off 0x00041140
  __IO uint32_t _pad49[15];
  __IO uint32_t TRCIDR8;  // off 0x00041180
  __IO uint32_t TRCIDR9;  // off 0x00041184
  __IO uint32_t TRCIDR10; // off 0x00041188
  __IO uint32_t TRCIDR11; // off 0x0004118c
  __IO uint32_t TRCIDR12; // off 0x00041190
  __IO uint32_t TRCIDR13; // off 0x00041194
  __IO uint32_t _pad50[10];
  __IO uint32_t TRCIMSPEC; // off 0x000411c0
  __IO uint32_t _pad51[7];
  __IO uint32_t TRCIDR0; // off 0x000411e0
  __IO uint32_t TRCIDR1; // off 0x000411e4
  __IO uint32_t TRCIDR2; // off 0x000411e8
  __IO uint32_t TRCIDR3; // off 0x000411ec
  __IO uint32_t TRCIDR4; // off 0x000411f0
  __IO uint32_t TRCIDR5; // off 0x000411f4
  __IO uint32_t TRCIDR6; // off 0x000411f8
  __IO uint32_t TRCIDR7; // off 0x000411fc
  __IO uint32_t _pad52[2];
  __IO uint32_t TRCRSCTLR2; // off 0x00041208
  __IO uint32_t TRCRSCTLR3; // off 0x0004120c
  __IO uint32_t _pad53[36];
  __IO uint32_t TRCSSCSR; // off 0x000412a0
  __IO uint32_t _pad54[7];
  __IO uint32_t TRCSSPCICR; // off 0x000412c0
  __IO uint32_t _pad55[19];
  __IO uint32_t TRCPDCR; // off 0x00041310
  __IO uint32_t TRCPDSR; // off 0x00041314
  __IO uint32_t _pad56[755];
  __IO uint32_t TRCITATBIDR; // off 0x00041ee4
  __IO uint32_t _pad57[3];
  __IO uint32_t TRCITIATBINR; // off 0x00041ef4
  __IO uint32_t _pad58;
  __IO uint32_t TRCITIATBOUTR; // off 0x00041efc
  __IO uint32_t _pad59[40];
  __IO uint32_t TRCCLAIMSET; // off 0x00041fa0
  __IO uint32_t TRCCLAIMCLR; // off 0x00041fa4
  __IO uint32_t _pad60[4];
  __IO uint32_t TRCAUTHSTATUS; // off 0x00041fb8
  __IO uint32_t TRCDEVARCH;    // off 0x00041fbc
  __IO uint32_t _pad61[2];
  __IO uint32_t TRCDEVID;   // off 0x00041fc8
  __IO uint32_t TRCDEVTYPE; // off 0x00041fcc
  __IO uint32_t TRCPIDR4;   // off 0x00041fd0
  __IO uint32_t TRCPIDR5;   // off 0x00041fd4
  __IO uint32_t TRCPIDR6;   // off 0x00041fd8
  __IO uint32_t TRCPIDR7;   // off 0x00041fdc
  __IO uint32_t TRCPIDR0;   // off 0x00041fe0
  __IO uint32_t TRCPIDR1;   // off 0x00041fe4
  __IO uint32_t TRCPIDR2;   // off 0x00041fe8
  __IO uint32_t TRCPIDR3;   // off 0x00041fec
  __IO uint32_t TRCCIDR0;   // off 0x00041ff0
  __IO uint32_t TRCCIDR1;   // off 0x00041ff4
  __IO uint32_t TRCCIDR2;   // off 0x00041ff8
  __IO uint32_t TRCCIDR3;   // off 0x00041ffc
  __IO uint32_t CTICONTROL; // off 0x00042000
  __IO uint32_t _pad62[3];
  __IO uint32_t CTIINTACK;   // off 0x00042010
  __IO uint32_t CTIAPPSET;   // off 0x00042014
  __IO uint32_t CTIAPPCLEAR; // off 0x00042018
  __IO uint32_t CTIAPPPULSE; // off 0x0004201c
  __IO uint32_t CTIINEN0;    // off 0x00042020
  __IO uint32_t CTIINEN1;    // off 0x00042024
  __IO uint32_t CTIINEN2;    // off 0x00042028
  __IO uint32_t CTIINEN3;    // off 0x0004202c
  __IO uint32_t CTIINEN4;    // off 0x00042030
  __IO uint32_t CTIINEN5;    // off 0x00042034
  __IO uint32_t CTIINEN6;    // off 0x00042038
  __IO uint32_t CTIINEN7;    // off 0x0004203c
  __IO uint32_t _pad63[24];
  __IO uint32_t CTIOUTEN0; // off 0x000420a0
  __IO uint32_t CTIOUTEN1; // off 0x000420a4
  __IO uint32_t CTIOUTEN2; // off 0x000420a8
  __IO uint32_t CTIOUTEN3; // off 0x000420ac
  __IO uint32_t CTIOUTEN4; // off 0x000420b0
  __IO uint32_t CTIOUTEN5; // off 0x000420b4
  __IO uint32_t CTIOUTEN6; // off 0x000420b8
  __IO uint32_t CTIOUTEN7; // off 0x000420bc
  __IO uint32_t _pad64[28];
  __IO uint32_t CTITRIGINSTATUS;  // off 0x00042130
  __IO uint32_t CTITRIGOUTSTATUS; // off 0x00042134
  __IO uint32_t CTICHINSTATUS;    // off 0x00042138
  __IO uint32_t _pad65;
  __IO uint32_t CTIGATE; // off 0x00042140
  __IO uint32_t ASICCTL; // off 0x00042144
  __IO uint32_t _pad66[871];
  __IO uint32_t ITCHOUT;   // off 0x00042ee4
  __IO uint32_t ITTRIGOUT; // off 0x00042ee8
  __IO uint32_t _pad67[2];
  __IO uint32_t ITCHIN; // off 0x00042ef4
  __IO uint32_t _pad68[2];
  __IO uint32_t ITCTRL; // off 0x00042f00
  __IO uint32_t _pad69[46];
  __IO uint32_t DEVARCH; // off 0x00042fbc
  __IO uint32_t _pad70[2];
  __IO uint32_t DEVID;   // off 0x00042fc8
  __IO uint32_t DEVTYPE; // off 0x00042fcc
  __IO uint32_t PIDR4;   // off 0x00042fd0
  __IO uint32_t PIDR5;   // off 0x00042fd4
  __IO uint32_t PIDR6;   // off 0x00042fd8
  __IO uint32_t PIDR7;   // off 0x00042fdc
  __IO uint32_t PIDR0;   // off 0x00042fe0
  __IO uint32_t PIDR1;   // off 0x00042fe4
  __IO uint32_t PIDR2;   // off 0x00042fe8
  __IO uint32_t PIDR3;   // off 0x00042fec
  __IO uint32_t CIDR0;   // off 0x00042ff0
  __IO uint32_t CIDR1;   // off 0x00042ff4
  __IO uint32_t CIDR2;   // off 0x00042ff8
  __IO uint32_t CIDR3;   // off 0x00042ffc
} PPB_TypeDef;
#define PPB_BASE 0xe0000000
#define PPB ((PPB_TypeDef *)PPB_BASE)

#define PPB_NS_BASE 0xe0020000
#define PPB_NS ((PPB_NS_TypeDef *)PPB_NS_BASE)

typedef struct {
  __IO uint32_t DIRECT_CSR; // off 0x00000000
  __IO uint32_t DIRECT_TX;  // off 0x00000004
  __IO uint32_t DIRECT_RX;  // off 0x00000008
  __IO uint32_t M0_TIMING;  // off 0x0000000c
  __IO uint32_t M0_RFMT;    // off 0x00000010
  __IO uint32_t M0_RCMD;    // off 0x00000014
  __IO uint32_t M0_WFMT;    // off 0x00000018
  __IO uint32_t M0_WCMD;    // off 0x0000001c
  __IO uint32_t M1_TIMING;  // off 0x00000020
  __IO uint32_t M1_RFMT;    // off 0x00000024
  __IO uint32_t M1_RCMD;    // off 0x00000028
  __IO uint32_t M1_WFMT;    // off 0x0000002c
  __IO uint32_t M1_WCMD;    // off 0x00000030
  __IO uint32_t ATRANS0;    // off 0x00000034
  __IO uint32_t ATRANS1;    // off 0x00000038
  __IO uint32_t ATRANS2;    // off 0x0000003c
  __IO uint32_t ATRANS3;    // off 0x00000040
  __IO uint32_t ATRANS4;    // off 0x00000044
  __IO uint32_t ATRANS5;    // off 0x00000048
  __IO uint32_t ATRANS6;    // off 0x0000004c
  __IO uint32_t ATRANS7;    // off 0x00000050
} QMI_TypeDef;
#define QMI_BASE 0x400d0000
#define QMI ((QMI_TypeDef *)QMI_BASE)

typedef struct {
  __IO uint32_t CTRL; // off 0x00000000
  __IO uint32_t _pad0;
  __IO uint32_t STAT;        // off 0x00000008
  __IO uint32_t CTR_HIT;     // off 0x0000000c
  __IO uint32_t CTR_ACC;     // off 0x00000010
  __IO uint32_t STREAM_ADDR; // off 0x00000014
  __IO uint32_t STREAM_CTR;  // off 0x00000018
  __IO uint32_t STREAM_FIFO; // off 0x0000001c
} XIP_CTRL_TypeDef;
#define XIP_CTRL_BASE 0x400c8000
#define XIP_CTRL ((XIP_CTRL_TypeDef *)XIP_CTRL_BASE)

typedef struct {
  __IO uint32_t STREAM;        // off 0x00000000
  __IO uint32_t QMI_DIRECT_TX; // off 0x00000004
  __IO uint32_t QMI_DIRECT_RX; // off 0x00000008
} XIP_AUX_TypeDef;
#define XIP_AUX_BASE 0x50500000
#define XIP_AUX ((XIP_AUX_TypeDef *)XIP_AUX_BASE)

typedef struct {
  __IO uint32_t PROC_CONFIG;            // off 0x00000000
  __IO uint32_t PROC_IN_SYNC_BYPASS;    // off 0x00000004
  __IO uint32_t PROC_IN_SYNC_BYPASS_HI; // off 0x00000008
  __IO uint32_t DBGFORCE;               // off 0x0000000c
  __IO uint32_t MEMPOWERDOWN;           // off 0x00000010
  __IO uint32_t AUXCTRL;                // off 0x00000014
} SYSCFG_TypeDef;
#define SYSCFG_BASE 0x40008000
#define SYSCFG ((SYSCFG_TypeDef *)SYSCFG_BASE)

typedef struct {
  __IO uint32_t CTRL;    // off 0x00000000
  __IO uint32_t STATUS;  // off 0x00000004
  __IO uint32_t DORMANT; // off 0x00000008
  __IO uint32_t STARTUP; // off 0x0000000c
  __IO uint32_t COUNT;   // off 0x00000010
} XOSC_TypeDef;
#define XOSC_BASE 0x40048000
#define XOSC ((XOSC_TypeDef *)XOSC_BASE)

typedef struct {
  __IO uint32_t CS;        // off 0x00000000
  __IO uint32_t PWR;       // off 0x00000004
  __IO uint32_t FBDIV_INT; // off 0x00000008
  __IO uint32_t PRIM;      // off 0x0000000c
  __IO uint32_t INTR;      // off 0x00000010
  __IO uint32_t INTE;      // off 0x00000014
  __IO uint32_t INTF;      // off 0x00000018
  __IO uint32_t INTS;      // off 0x0000001c
} PLL_SYS_TypeDef;
#define PLL_SYS_BASE 0x40050000
#define PLL_SYS ((PLL_SYS_TypeDef *)PLL_SYS_BASE)

#define PLL_USB_BASE 0x40058000
#define PLL_USB ((PLL_USB_TypeDef *)PLL_USB_BASE)

typedef struct {
  __IO uint32_t LOCK;             // off 0x00000000
  __IO uint32_t FORCE_CORE_NS;    // off 0x00000004
  __IO uint32_t CFGRESET;         // off 0x00000008
  __IO uint32_t GPIO_NSMASK0;     // off 0x0000000c
  __IO uint32_t GPIO_NSMASK1;     // off 0x00000010
  __IO uint32_t ROM;              // off 0x00000014
  __IO uint32_t XIP_MAIN;         // off 0x00000018
  __IO uint32_t SRAM0;            // off 0x0000001c
  __IO uint32_t SRAM1;            // off 0x00000020
  __IO uint32_t SRAM2;            // off 0x00000024
  __IO uint32_t SRAM3;            // off 0x00000028
  __IO uint32_t SRAM4;            // off 0x0000002c
  __IO uint32_t SRAM5;            // off 0x00000030
  __IO uint32_t SRAM6;            // off 0x00000034
  __IO uint32_t SRAM7;            // off 0x00000038
  __IO uint32_t SRAM8;            // off 0x0000003c
  __IO uint32_t SRAM9;            // off 0x00000040
  __IO uint32_t DMA;              // off 0x00000044
  __IO uint32_t USBCTRL;          // off 0x00000048
  __IO uint32_t PIO0;             // off 0x0000004c
  __IO uint32_t PIO1;             // off 0x00000050
  __IO uint32_t PIO2;             // off 0x00000054
  __IO uint32_t CORESIGHT_TRACE;  // off 0x00000058
  __IO uint32_t CORESIGHT_PERIPH; // off 0x0000005c
  __IO uint32_t SYSINFO_CTRL;     // off 0x00000060
  __IO uint32_t RESETS_CTRL;      // off 0x00000064
  __IO uint32_t IO_BANK0_CTRL;    // off 0x00000068
  __IO uint32_t IO_BANK1;         // off 0x0000006c
  __IO uint32_t PADS_BANK0_CTRL;  // off 0x00000070
  __IO uint32_t PADS_QSPI_CTRL;   // off 0x00000074
  __IO uint32_t BUSCTRL;          // off 0x00000078
  __IO uint32_t ADC0;             // off 0x0000007c
  __IO uint32_t HSTX;             // off 0x00000080
  __IO uint32_t I2C0;             // off 0x00000084
  __IO uint32_t I2C1;             // off 0x00000088
  __IO uint32_t PWM;              // off 0x0000008c
  __IO uint32_t SPI0;             // off 0x00000090
  __IO uint32_t SPI1;             // off 0x00000094
  __IO uint32_t TIMER0;           // off 0x00000098
  __IO uint32_t TIMER1;           // off 0x0000009c
  __IO uint32_t UART0;            // off 0x000000a0
  __IO uint32_t UART1;            // off 0x000000a4
  __IO uint32_t OTP;              // off 0x000000a8
  __IO uint32_t TBMAN;            // off 0x000000ac
  __IO uint32_t POWMAN;           // off 0x000000b0
  __IO uint32_t TRNG;             // off 0x000000b4
  __IO uint32_t SHA256_CTRL;      // off 0x000000b8
  __IO uint32_t SYSCFG_CTRL;      // off 0x000000bc
  __IO uint32_t CLOCKS_CTRL;      // off 0x000000c0
  __IO uint32_t XOSC_CTRL;        // off 0x000000c4
  __IO uint32_t ROSC;             // off 0x000000c8
  __IO uint32_t PLL_SYS_CTRL;     // off 0x000000cc
  __IO uint32_t PLL_USB_CTRL;     // off 0x000000d0
  __IO uint32_t TICKS_CTRL;       // off 0x000000d4
  __IO uint32_t WATCHDOG;         // off 0x000000d8
  __IO uint32_t RSM;              // off 0x000000dc
  __IO uint32_t XIP_CTRL_CTRL;    // off 0x000000e0
  __IO uint32_t XIP_QMI;          // off 0x000000e4
  __IO uint32_t XIP_AUX_CTRL;     // off 0x000000e8
} ACCESSCTRL_TypeDef;
#define ACCESSCTRL_BASE 0x40060000
#define ACCESSCTRL ((ACCESSCTRL_TypeDef *)ACCESSCTRL_BASE)

typedef struct {
  __IO uint32_t UARTDR;  // off 0x00000000
  __IO uint32_t UARTRSR; // off 0x00000004
  __IO uint32_t _pad0[4];
  __IO uint32_t UARTFR; // off 0x00000018
  __IO uint32_t _pad1;
  __IO uint32_t UARTILPR;  // off 0x00000020
  __IO uint32_t UARTIBRD;  // off 0x00000024
  __IO uint32_t UARTFBRD;  // off 0x00000028
  __IO uint32_t UARTLCR_H; // off 0x0000002c
  __IO uint32_t UARTCR;    // off 0x00000030
  __IO uint32_t UARTIFLS;  // off 0x00000034
  __IO uint32_t UARTIMSC;  // off 0x00000038
  __IO uint32_t UARTRIS;   // off 0x0000003c
  __IO uint32_t UARTMIS;   // off 0x00000040
  __IO uint32_t UARTICR;   // off 0x00000044
  __IO uint32_t UARTDMACR; // off 0x00000048
  __IO uint32_t _pad2[997];
  __IO uint32_t UARTPERIPHID0; // off 0x00000fe0
  __IO uint32_t UARTPERIPHID1; // off 0x00000fe4
  __IO uint32_t UARTPERIPHID2; // off 0x00000fe8
  __IO uint32_t UARTPERIPHID3; // off 0x00000fec
  __IO uint32_t UARTPCELLID0;  // off 0x00000ff0
  __IO uint32_t UARTPCELLID1;  // off 0x00000ff4
  __IO uint32_t UARTPCELLID2;  // off 0x00000ff8
  __IO uint32_t UARTPCELLID3;  // off 0x00000ffc
} UART_TypeDef;
#define UART0_BASE 0x40070000
#define UART0 ((UART_TypeDef *)UART0_BASE)

#define UART1_BASE 0x40078000
#define UART1 ((UART_TypeDef *)UART1_BASE)

typedef struct {
  __IO uint32_t CTRL;      // off 0x00000000
  __IO uint32_t FREQA;     // off 0x00000004
  __IO uint32_t FREQB;     // off 0x00000008
  __IO uint32_t RANDOM;    // off 0x0000000c
  __IO uint32_t DORMANT;   // off 0x00000010
  __IO uint32_t DIV;       // off 0x00000014
  __IO uint32_t PHASE;     // off 0x00000018
  __IO uint32_t STATUS;    // off 0x0000001c
  __IO uint32_t RANDOMBIT; // off 0x00000020
  __IO uint32_t COUNT;     // off 0x00000024
} ROSC_TypeDef;
#define ROSC_BASE 0x400e8000
#define ROSC ((ROSC_TypeDef *)ROSC_BASE)

typedef struct {
  __IO uint32_t BADPASSWD;           // off 0x00000000
  __IO uint32_t VREG_CTRL;           // off 0x00000004
  __IO uint32_t VREG_STS;            // off 0x00000008
  __IO uint32_t VREG;                // off 0x0000000c
  __IO uint32_t VREG_LP_ENTRY;       // off 0x00000010
  __IO uint32_t VREG_LP_EXIT;        // off 0x00000014
  __IO uint32_t BOD_CTRL;            // off 0x00000018
  __IO uint32_t BOD;                 // off 0x0000001c
  __IO uint32_t BOD_LP_ENTRY;        // off 0x00000020
  __IO uint32_t BOD_LP_EXIT;         // off 0x00000024
  __IO uint32_t LPOSC;               // off 0x00000028
  __IO uint32_t CHIP_RESET;          // off 0x0000002c
  __IO uint32_t WDSEL;               // off 0x00000030
  __IO uint32_t SEQ_CFG;             // off 0x00000034
  __IO uint32_t STATE;               // off 0x00000038
  __IO uint32_t POW_FASTDIV;         // off 0x0000003c
  __IO uint32_t POW_DELAY;           // off 0x00000040
  __IO uint32_t EXT_CTRL0;           // off 0x00000044
  __IO uint32_t EXT_CTRL1;           // off 0x00000048
  __IO uint32_t EXT_TIME_REF;        // off 0x0000004c
  __IO uint32_t LPOSC_FREQ_KHZ_INT;  // off 0x00000050
  __IO uint32_t LPOSC_FREQ_KHZ_FRAC; // off 0x00000054
  __IO uint32_t XOSC_FREQ_KHZ_INT;   // off 0x00000058
  __IO uint32_t XOSC_FREQ_KHZ_FRAC;  // off 0x0000005c
  __IO uint32_t SET_TIME_63TO48;     // off 0x00000060
  __IO uint32_t SET_TIME_47TO32;     // off 0x00000064
  __IO uint32_t SET_TIME_31TO16;     // off 0x00000068
  __IO uint32_t SET_TIME_15TO0;      // off 0x0000006c
  __IO uint32_t READ_TIME_UPPER;     // off 0x00000070
  __IO uint32_t READ_TIME_LOWER;     // off 0x00000074
  __IO uint32_t ALARM_TIME_63TO48;   // off 0x00000078
  __IO uint32_t ALARM_TIME_47TO32;   // off 0x0000007c
  __IO uint32_t ALARM_TIME_31TO16;   // off 0x00000080
  __IO uint32_t ALARM_TIME_15TO0;    // off 0x00000084
  __IO uint32_t TIMER;               // off 0x00000088
  __IO uint32_t PWRUP0;              // off 0x0000008c
  __IO uint32_t PWRUP1;              // off 0x00000090
  __IO uint32_t PWRUP2;              // off 0x00000094
  __IO uint32_t PWRUP3;              // off 0x00000098
  __IO uint32_t CURRENT_PWRUP_REQ;   // off 0x0000009c
  __IO uint32_t LAST_SWCORE_PWRUP;   // off 0x000000a0
  __IO uint32_t DBG_PWRCFG;          // off 0x000000a4
  __IO uint32_t BOOTDIS;             // off 0x000000a8
  __IO uint32_t DBGCONFIG;           // off 0x000000ac
  __IO uint32_t SCRATCH0;            // off 0x000000b0
  __IO uint32_t SCRATCH1;            // off 0x000000b4
  __IO uint32_t SCRATCH2;            // off 0x000000b8
  __IO uint32_t SCRATCH3;            // off 0x000000bc
  __IO uint32_t SCRATCH4;            // off 0x000000c0
  __IO uint32_t SCRATCH5;            // off 0x000000c4
  __IO uint32_t SCRATCH6;            // off 0x000000c8
  __IO uint32_t SCRATCH7;            // off 0x000000cc
  __IO uint32_t BOOT0;               // off 0x000000d0
  __IO uint32_t BOOT1;               // off 0x000000d4
  __IO uint32_t BOOT2;               // off 0x000000d8
  __IO uint32_t BOOT3;               // off 0x000000dc
  __IO uint32_t INTR;                // off 0x000000e0
  __IO uint32_t INTE;                // off 0x000000e4
  __IO uint32_t INTF;                // off 0x000000e8
  __IO uint32_t INTS;                // off 0x000000ec
} POWMAN_TypeDef;
#define POWMAN_BASE 0x40100000
#define POWMAN ((POWMAN_TypeDef *)POWMAN_BASE)

typedef struct {
  __IO uint32_t CTRL;     // off 0x00000000
  __IO uint32_t LOAD;     // off 0x00000004
  __IO uint32_t REASON;   // off 0x00000008
  __IO uint32_t SCRATCH0; // off 0x0000000c
  __IO uint32_t SCRATCH1; // off 0x00000010
  __IO uint32_t SCRATCH2; // off 0x00000014
  __IO uint32_t SCRATCH3; // off 0x00000018
  __IO uint32_t SCRATCH4; // off 0x0000001c
  __IO uint32_t SCRATCH5; // off 0x00000020
  __IO uint32_t SCRATCH6; // off 0x00000024
  __IO uint32_t SCRATCH7; // off 0x00000028
} WATCHDOG_TypeDef;
#define WATCHDOG_BASE 0x400d8000
#define WATCHDOG ((WATCHDOG_TypeDef *)WATCHDOG_BASE)

typedef struct {
  __IO uint32_t CH0_READ_ADDR;             // off 0x00000000
  __IO uint32_t CH0_WRITE_ADDR;            // off 0x00000004
  __IO uint32_t CH0_TRANS_COUNT;           // off 0x00000008
  __IO uint32_t CH0_CTRL_TRIG;             // off 0x0000000c
  __IO uint32_t CH0_AL1_CTRL;              // off 0x00000010
  __IO uint32_t CH0_AL1_READ_ADDR;         // off 0x00000014
  __IO uint32_t CH0_AL1_WRITE_ADDR;        // off 0x00000018
  __IO uint32_t CH0_AL1_TRANS_COUNT_TRIG;  // off 0x0000001c
  __IO uint32_t CH0_AL2_CTRL;              // off 0x00000020
  __IO uint32_t CH0_AL2_TRANS_COUNT;       // off 0x00000024
  __IO uint32_t CH0_AL2_READ_ADDR;         // off 0x00000028
  __IO uint32_t CH0_AL2_WRITE_ADDR_TRIG;   // off 0x0000002c
  __IO uint32_t CH0_AL3_CTRL;              // off 0x00000030
  __IO uint32_t CH0_AL3_WRITE_ADDR;        // off 0x00000034
  __IO uint32_t CH0_AL3_TRANS_COUNT;       // off 0x00000038
  __IO uint32_t CH0_AL3_READ_ADDR_TRIG;    // off 0x0000003c
  __IO uint32_t CH1_READ_ADDR;             // off 0x00000040
  __IO uint32_t CH1_WRITE_ADDR;            // off 0x00000044
  __IO uint32_t CH1_TRANS_COUNT;           // off 0x00000048
  __IO uint32_t CH1_CTRL_TRIG;             // off 0x0000004c
  __IO uint32_t CH1_AL1_CTRL;              // off 0x00000050
  __IO uint32_t CH1_AL1_READ_ADDR;         // off 0x00000054
  __IO uint32_t CH1_AL1_WRITE_ADDR;        // off 0x00000058
  __IO uint32_t CH1_AL1_TRANS_COUNT_TRIG;  // off 0x0000005c
  __IO uint32_t CH1_AL2_CTRL;              // off 0x00000060
  __IO uint32_t CH1_AL2_TRANS_COUNT;       // off 0x00000064
  __IO uint32_t CH1_AL2_READ_ADDR;         // off 0x00000068
  __IO uint32_t CH1_AL2_WRITE_ADDR_TRIG;   // off 0x0000006c
  __IO uint32_t CH1_AL3_CTRL;              // off 0x00000070
  __IO uint32_t CH1_AL3_WRITE_ADDR;        // off 0x00000074
  __IO uint32_t CH1_AL3_TRANS_COUNT;       // off 0x00000078
  __IO uint32_t CH1_AL3_READ_ADDR_TRIG;    // off 0x0000007c
  __IO uint32_t CH2_READ_ADDR;             // off 0x00000080
  __IO uint32_t CH2_WRITE_ADDR;            // off 0x00000084
  __IO uint32_t CH2_TRANS_COUNT;           // off 0x00000088
  __IO uint32_t CH2_CTRL_TRIG;             // off 0x0000008c
  __IO uint32_t CH2_AL1_CTRL;              // off 0x00000090
  __IO uint32_t CH2_AL1_READ_ADDR;         // off 0x00000094
  __IO uint32_t CH2_AL1_WRITE_ADDR;        // off 0x00000098
  __IO uint32_t CH2_AL1_TRANS_COUNT_TRIG;  // off 0x0000009c
  __IO uint32_t CH2_AL2_CTRL;              // off 0x000000a0
  __IO uint32_t CH2_AL2_TRANS_COUNT;       // off 0x000000a4
  __IO uint32_t CH2_AL2_READ_ADDR;         // off 0x000000a8
  __IO uint32_t CH2_AL2_WRITE_ADDR_TRIG;   // off 0x000000ac
  __IO uint32_t CH2_AL3_CTRL;              // off 0x000000b0
  __IO uint32_t CH2_AL3_WRITE_ADDR;        // off 0x000000b4
  __IO uint32_t CH2_AL3_TRANS_COUNT;       // off 0x000000b8
  __IO uint32_t CH2_AL3_READ_ADDR_TRIG;    // off 0x000000bc
  __IO uint32_t CH3_READ_ADDR;             // off 0x000000c0
  __IO uint32_t CH3_WRITE_ADDR;            // off 0x000000c4
  __IO uint32_t CH3_TRANS_COUNT;           // off 0x000000c8
  __IO uint32_t CH3_CTRL_TRIG;             // off 0x000000cc
  __IO uint32_t CH3_AL1_CTRL;              // off 0x000000d0
  __IO uint32_t CH3_AL1_READ_ADDR;         // off 0x000000d4
  __IO uint32_t CH3_AL1_WRITE_ADDR;        // off 0x000000d8
  __IO uint32_t CH3_AL1_TRANS_COUNT_TRIG;  // off 0x000000dc
  __IO uint32_t CH3_AL2_CTRL;              // off 0x000000e0
  __IO uint32_t CH3_AL2_TRANS_COUNT;       // off 0x000000e4
  __IO uint32_t CH3_AL2_READ_ADDR;         // off 0x000000e8
  __IO uint32_t CH3_AL2_WRITE_ADDR_TRIG;   // off 0x000000ec
  __IO uint32_t CH3_AL3_CTRL;              // off 0x000000f0
  __IO uint32_t CH3_AL3_WRITE_ADDR;        // off 0x000000f4
  __IO uint32_t CH3_AL3_TRANS_COUNT;       // off 0x000000f8
  __IO uint32_t CH3_AL3_READ_ADDR_TRIG;    // off 0x000000fc
  __IO uint32_t CH4_READ_ADDR;             // off 0x00000100
  __IO uint32_t CH4_WRITE_ADDR;            // off 0x00000104
  __IO uint32_t CH4_TRANS_COUNT;           // off 0x00000108
  __IO uint32_t CH4_CTRL_TRIG;             // off 0x0000010c
  __IO uint32_t CH4_AL1_CTRL;              // off 0x00000110
  __IO uint32_t CH4_AL1_READ_ADDR;         // off 0x00000114
  __IO uint32_t CH4_AL1_WRITE_ADDR;        // off 0x00000118
  __IO uint32_t CH4_AL1_TRANS_COUNT_TRIG;  // off 0x0000011c
  __IO uint32_t CH4_AL2_CTRL;              // off 0x00000120
  __IO uint32_t CH4_AL2_TRANS_COUNT;       // off 0x00000124
  __IO uint32_t CH4_AL2_READ_ADDR;         // off 0x00000128
  __IO uint32_t CH4_AL2_WRITE_ADDR_TRIG;   // off 0x0000012c
  __IO uint32_t CH4_AL3_CTRL;              // off 0x00000130
  __IO uint32_t CH4_AL3_WRITE_ADDR;        // off 0x00000134
  __IO uint32_t CH4_AL3_TRANS_COUNT;       // off 0x00000138
  __IO uint32_t CH4_AL3_READ_ADDR_TRIG;    // off 0x0000013c
  __IO uint32_t CH5_READ_ADDR;             // off 0x00000140
  __IO uint32_t CH5_WRITE_ADDR;            // off 0x00000144
  __IO uint32_t CH5_TRANS_COUNT;           // off 0x00000148
  __IO uint32_t CH5_CTRL_TRIG;             // off 0x0000014c
  __IO uint32_t CH5_AL1_CTRL;              // off 0x00000150
  __IO uint32_t CH5_AL1_READ_ADDR;         // off 0x00000154
  __IO uint32_t CH5_AL1_WRITE_ADDR;        // off 0x00000158
  __IO uint32_t CH5_AL1_TRANS_COUNT_TRIG;  // off 0x0000015c
  __IO uint32_t CH5_AL2_CTRL;              // off 0x00000160
  __IO uint32_t CH5_AL2_TRANS_COUNT;       // off 0x00000164
  __IO uint32_t CH5_AL2_READ_ADDR;         // off 0x00000168
  __IO uint32_t CH5_AL2_WRITE_ADDR_TRIG;   // off 0x0000016c
  __IO uint32_t CH5_AL3_CTRL;              // off 0x00000170
  __IO uint32_t CH5_AL3_WRITE_ADDR;        // off 0x00000174
  __IO uint32_t CH5_AL3_TRANS_COUNT;       // off 0x00000178
  __IO uint32_t CH5_AL3_READ_ADDR_TRIG;    // off 0x0000017c
  __IO uint32_t CH6_READ_ADDR;             // off 0x00000180
  __IO uint32_t CH6_WRITE_ADDR;            // off 0x00000184
  __IO uint32_t CH6_TRANS_COUNT;           // off 0x00000188
  __IO uint32_t CH6_CTRL_TRIG;             // off 0x0000018c
  __IO uint32_t CH6_AL1_CTRL;              // off 0x00000190
  __IO uint32_t CH6_AL1_READ_ADDR;         // off 0x00000194
  __IO uint32_t CH6_AL1_WRITE_ADDR;        // off 0x00000198
  __IO uint32_t CH6_AL1_TRANS_COUNT_TRIG;  // off 0x0000019c
  __IO uint32_t CH6_AL2_CTRL;              // off 0x000001a0
  __IO uint32_t CH6_AL2_TRANS_COUNT;       // off 0x000001a4
  __IO uint32_t CH6_AL2_READ_ADDR;         // off 0x000001a8
  __IO uint32_t CH6_AL2_WRITE_ADDR_TRIG;   // off 0x000001ac
  __IO uint32_t CH6_AL3_CTRL;              // off 0x000001b0
  __IO uint32_t CH6_AL3_WRITE_ADDR;        // off 0x000001b4
  __IO uint32_t CH6_AL3_TRANS_COUNT;       // off 0x000001b8
  __IO uint32_t CH6_AL3_READ_ADDR_TRIG;    // off 0x000001bc
  __IO uint32_t CH7_READ_ADDR;             // off 0x000001c0
  __IO uint32_t CH7_WRITE_ADDR;            // off 0x000001c4
  __IO uint32_t CH7_TRANS_COUNT;           // off 0x000001c8
  __IO uint32_t CH7_CTRL_TRIG;             // off 0x000001cc
  __IO uint32_t CH7_AL1_CTRL;              // off 0x000001d0
  __IO uint32_t CH7_AL1_READ_ADDR;         // off 0x000001d4
  __IO uint32_t CH7_AL1_WRITE_ADDR;        // off 0x000001d8
  __IO uint32_t CH7_AL1_TRANS_COUNT_TRIG;  // off 0x000001dc
  __IO uint32_t CH7_AL2_CTRL;              // off 0x000001e0
  __IO uint32_t CH7_AL2_TRANS_COUNT;       // off 0x000001e4
  __IO uint32_t CH7_AL2_READ_ADDR;         // off 0x000001e8
  __IO uint32_t CH7_AL2_WRITE_ADDR_TRIG;   // off 0x000001ec
  __IO uint32_t CH7_AL3_CTRL;              // off 0x000001f0
  __IO uint32_t CH7_AL3_WRITE_ADDR;        // off 0x000001f4
  __IO uint32_t CH7_AL3_TRANS_COUNT;       // off 0x000001f8
  __IO uint32_t CH7_AL3_READ_ADDR_TRIG;    // off 0x000001fc
  __IO uint32_t CH8_READ_ADDR;             // off 0x00000200
  __IO uint32_t CH8_WRITE_ADDR;            // off 0x00000204
  __IO uint32_t CH8_TRANS_COUNT;           // off 0x00000208
  __IO uint32_t CH8_CTRL_TRIG;             // off 0x0000020c
  __IO uint32_t CH8_AL1_CTRL;              // off 0x00000210
  __IO uint32_t CH8_AL1_READ_ADDR;         // off 0x00000214
  __IO uint32_t CH8_AL1_WRITE_ADDR;        // off 0x00000218
  __IO uint32_t CH8_AL1_TRANS_COUNT_TRIG;  // off 0x0000021c
  __IO uint32_t CH8_AL2_CTRL;              // off 0x00000220
  __IO uint32_t CH8_AL2_TRANS_COUNT;       // off 0x00000224
  __IO uint32_t CH8_AL2_READ_ADDR;         // off 0x00000228
  __IO uint32_t CH8_AL2_WRITE_ADDR_TRIG;   // off 0x0000022c
  __IO uint32_t CH8_AL3_CTRL;              // off 0x00000230
  __IO uint32_t CH8_AL3_WRITE_ADDR;        // off 0x00000234
  __IO uint32_t CH8_AL3_TRANS_COUNT;       // off 0x00000238
  __IO uint32_t CH8_AL3_READ_ADDR_TRIG;    // off 0x0000023c
  __IO uint32_t CH9_READ_ADDR;             // off 0x00000240
  __IO uint32_t CH9_WRITE_ADDR;            // off 0x00000244
  __IO uint32_t CH9_TRANS_COUNT;           // off 0x00000248
  __IO uint32_t CH9_CTRL_TRIG;             // off 0x0000024c
  __IO uint32_t CH9_AL1_CTRL;              // off 0x00000250
  __IO uint32_t CH9_AL1_READ_ADDR;         // off 0x00000254
  __IO uint32_t CH9_AL1_WRITE_ADDR;        // off 0x00000258
  __IO uint32_t CH9_AL1_TRANS_COUNT_TRIG;  // off 0x0000025c
  __IO uint32_t CH9_AL2_CTRL;              // off 0x00000260
  __IO uint32_t CH9_AL2_TRANS_COUNT;       // off 0x00000264
  __IO uint32_t CH9_AL2_READ_ADDR;         // off 0x00000268
  __IO uint32_t CH9_AL2_WRITE_ADDR_TRIG;   // off 0x0000026c
  __IO uint32_t CH9_AL3_CTRL;              // off 0x00000270
  __IO uint32_t CH9_AL3_WRITE_ADDR;        // off 0x00000274
  __IO uint32_t CH9_AL3_TRANS_COUNT;       // off 0x00000278
  __IO uint32_t CH9_AL3_READ_ADDR_TRIG;    // off 0x0000027c
  __IO uint32_t CH10_READ_ADDR;            // off 0x00000280
  __IO uint32_t CH10_WRITE_ADDR;           // off 0x00000284
  __IO uint32_t CH10_TRANS_COUNT;          // off 0x00000288
  __IO uint32_t CH10_CTRL_TRIG;            // off 0x0000028c
  __IO uint32_t CH10_AL1_CTRL;             // off 0x00000290
  __IO uint32_t CH10_AL1_READ_ADDR;        // off 0x00000294
  __IO uint32_t CH10_AL1_WRITE_ADDR;       // off 0x00000298
  __IO uint32_t CH10_AL1_TRANS_COUNT_TRIG; // off 0x0000029c
  __IO uint32_t CH10_AL2_CTRL;             // off 0x000002a0
  __IO uint32_t CH10_AL2_TRANS_COUNT;      // off 0x000002a4
  __IO uint32_t CH10_AL2_READ_ADDR;        // off 0x000002a8
  __IO uint32_t CH10_AL2_WRITE_ADDR_TRIG;  // off 0x000002ac
  __IO uint32_t CH10_AL3_CTRL;             // off 0x000002b0
  __IO uint32_t CH10_AL3_WRITE_ADDR;       // off 0x000002b4
  __IO uint32_t CH10_AL3_TRANS_COUNT;      // off 0x000002b8
  __IO uint32_t CH10_AL3_READ_ADDR_TRIG;   // off 0x000002bc
  __IO uint32_t CH11_READ_ADDR;            // off 0x000002c0
  __IO uint32_t CH11_WRITE_ADDR;           // off 0x000002c4
  __IO uint32_t CH11_TRANS_COUNT;          // off 0x000002c8
  __IO uint32_t CH11_CTRL_TRIG;            // off 0x000002cc
  __IO uint32_t CH11_AL1_CTRL;             // off 0x000002d0
  __IO uint32_t CH11_AL1_READ_ADDR;        // off 0x000002d4
  __IO uint32_t CH11_AL1_WRITE_ADDR;       // off 0x000002d8
  __IO uint32_t CH11_AL1_TRANS_COUNT_TRIG; // off 0x000002dc
  __IO uint32_t CH11_AL2_CTRL;             // off 0x000002e0
  __IO uint32_t CH11_AL2_TRANS_COUNT;      // off 0x000002e4
  __IO uint32_t CH11_AL2_READ_ADDR;        // off 0x000002e8
  __IO uint32_t CH11_AL2_WRITE_ADDR_TRIG;  // off 0x000002ec
  __IO uint32_t CH11_AL3_CTRL;             // off 0x000002f0
  __IO uint32_t CH11_AL3_WRITE_ADDR;       // off 0x000002f4
  __IO uint32_t CH11_AL3_TRANS_COUNT;      // off 0x000002f8
  __IO uint32_t CH11_AL3_READ_ADDR_TRIG;   // off 0x000002fc
  __IO uint32_t CH12_READ_ADDR;            // off 0x00000300
  __IO uint32_t CH12_WRITE_ADDR;           // off 0x00000304
  __IO uint32_t CH12_TRANS_COUNT;          // off 0x00000308
  __IO uint32_t CH12_CTRL_TRIG;            // off 0x0000030c
  __IO uint32_t CH12_AL1_CTRL;             // off 0x00000310
  __IO uint32_t CH12_AL1_READ_ADDR;        // off 0x00000314
  __IO uint32_t CH12_AL1_WRITE_ADDR;       // off 0x00000318
  __IO uint32_t CH12_AL1_TRANS_COUNT_TRIG; // off 0x0000031c
  __IO uint32_t CH12_AL2_CTRL;             // off 0x00000320
  __IO uint32_t CH12_AL2_TRANS_COUNT;      // off 0x00000324
  __IO uint32_t CH12_AL2_READ_ADDR;        // off 0x00000328
  __IO uint32_t CH12_AL2_WRITE_ADDR_TRIG;  // off 0x0000032c
  __IO uint32_t CH12_AL3_CTRL;             // off 0x00000330
  __IO uint32_t CH12_AL3_WRITE_ADDR;       // off 0x00000334
  __IO uint32_t CH12_AL3_TRANS_COUNT;      // off 0x00000338
  __IO uint32_t CH12_AL3_READ_ADDR_TRIG;   // off 0x0000033c
  __IO uint32_t CH13_READ_ADDR;            // off 0x00000340
  __IO uint32_t CH13_WRITE_ADDR;           // off 0x00000344
  __IO uint32_t CH13_TRANS_COUNT;          // off 0x00000348
  __IO uint32_t CH13_CTRL_TRIG;            // off 0x0000034c
  __IO uint32_t CH13_AL1_CTRL;             // off 0x00000350
  __IO uint32_t CH13_AL1_READ_ADDR;        // off 0x00000354
  __IO uint32_t CH13_AL1_WRITE_ADDR;       // off 0x00000358
  __IO uint32_t CH13_AL1_TRANS_COUNT_TRIG; // off 0x0000035c
  __IO uint32_t CH13_AL2_CTRL;             // off 0x00000360
  __IO uint32_t CH13_AL2_TRANS_COUNT;      // off 0x00000364
  __IO uint32_t CH13_AL2_READ_ADDR;        // off 0x00000368
  __IO uint32_t CH13_AL2_WRITE_ADDR_TRIG;  // off 0x0000036c
  __IO uint32_t CH13_AL3_CTRL;             // off 0x00000370
  __IO uint32_t CH13_AL3_WRITE_ADDR;       // off 0x00000374
  __IO uint32_t CH13_AL3_TRANS_COUNT;      // off 0x00000378
  __IO uint32_t CH13_AL3_READ_ADDR_TRIG;   // off 0x0000037c
  __IO uint32_t CH14_READ_ADDR;            // off 0x00000380
  __IO uint32_t CH14_WRITE_ADDR;           // off 0x00000384
  __IO uint32_t CH14_TRANS_COUNT;          // off 0x00000388
  __IO uint32_t CH14_CTRL_TRIG;            // off 0x0000038c
  __IO uint32_t CH14_AL1_CTRL;             // off 0x00000390
  __IO uint32_t CH14_AL1_READ_ADDR;        // off 0x00000394
  __IO uint32_t CH14_AL1_WRITE_ADDR;       // off 0x00000398
  __IO uint32_t CH14_AL1_TRANS_COUNT_TRIG; // off 0x0000039c
  __IO uint32_t CH14_AL2_CTRL;             // off 0x000003a0
  __IO uint32_t CH14_AL2_TRANS_COUNT;      // off 0x000003a4
  __IO uint32_t CH14_AL2_READ_ADDR;        // off 0x000003a8
  __IO uint32_t CH14_AL2_WRITE_ADDR_TRIG;  // off 0x000003ac
  __IO uint32_t CH14_AL3_CTRL;             // off 0x000003b0
  __IO uint32_t CH14_AL3_WRITE_ADDR;       // off 0x000003b4
  __IO uint32_t CH14_AL3_TRANS_COUNT;      // off 0x000003b8
  __IO uint32_t CH14_AL3_READ_ADDR_TRIG;   // off 0x000003bc
  __IO uint32_t CH15_READ_ADDR;            // off 0x000003c0
  __IO uint32_t CH15_WRITE_ADDR;           // off 0x000003c4
  __IO uint32_t CH15_TRANS_COUNT;          // off 0x000003c8
  __IO uint32_t CH15_CTRL_TRIG;            // off 0x000003cc
  __IO uint32_t CH15_AL1_CTRL;             // off 0x000003d0
  __IO uint32_t CH15_AL1_READ_ADDR;        // off 0x000003d4
  __IO uint32_t CH15_AL1_WRITE_ADDR;       // off 0x000003d8
  __IO uint32_t CH15_AL1_TRANS_COUNT_TRIG; // off 0x000003dc
  __IO uint32_t CH15_AL2_CTRL;             // off 0x000003e0
  __IO uint32_t CH15_AL2_TRANS_COUNT;      // off 0x000003e4
  __IO uint32_t CH15_AL2_READ_ADDR;        // off 0x000003e8
  __IO uint32_t CH15_AL2_WRITE_ADDR_TRIG;  // off 0x000003ec
  __IO uint32_t CH15_AL3_CTRL;             // off 0x000003f0
  __IO uint32_t CH15_AL3_WRITE_ADDR;       // off 0x000003f4
  __IO uint32_t CH15_AL3_TRANS_COUNT;      // off 0x000003f8
  __IO uint32_t CH15_AL3_READ_ADDR_TRIG;   // off 0x000003fc
  __IO uint32_t INTR;                      // off 0x00000400
  __IO uint32_t INTE0;                     // off 0x00000404
  __IO uint32_t INTF0;                     // off 0x00000408
  __IO uint32_t INTS0;                     // off 0x0000040c
  __IO uint32_t INTR1;                     // off 0x00000410
  __IO uint32_t INTE1;                     // off 0x00000414
  __IO uint32_t INTF1;                     // off 0x00000418
  __IO uint32_t INTS1;                     // off 0x0000041c
  __IO uint32_t INTR2;                     // off 0x00000420
  __IO uint32_t INTE2;                     // off 0x00000424
  __IO uint32_t INTF2;                     // off 0x00000428
  __IO uint32_t INTS2;                     // off 0x0000042c
  __IO uint32_t INTR3;                     // off 0x00000430
  __IO uint32_t INTE3;                     // off 0x00000434
  __IO uint32_t INTF3;                     // off 0x00000438
  __IO uint32_t INTS3;                     // off 0x0000043c
  __IO uint32_t TIMER0;                    // off 0x00000440
  __IO uint32_t TIMER1;                    // off 0x00000444
  __IO uint32_t TIMER2;                    // off 0x00000448
  __IO uint32_t TIMER3;                    // off 0x0000044c
  __IO uint32_t MULTI_CHAN_TRIGGER;        // off 0x00000450
  __IO uint32_t SNIFF_CTRL;                // off 0x00000454
  __IO uint32_t SNIFF_DATA;                // off 0x00000458
  __IO uint32_t _pad0;
  __IO uint32_t FIFO_LEVELS; // off 0x00000460
  __IO uint32_t CHAN_ABORT;  // off 0x00000464
  __IO uint32_t N_CHANNELS;  // off 0x00000468
  __IO uint32_t _pad1[5];
  __IO uint32_t SECCFG_CH0;  // off 0x00000480
  __IO uint32_t SECCFG_CH1;  // off 0x00000484
  __IO uint32_t SECCFG_CH2;  // off 0x00000488
  __IO uint32_t SECCFG_CH3;  // off 0x0000048c
  __IO uint32_t SECCFG_CH4;  // off 0x00000490
  __IO uint32_t SECCFG_CH5;  // off 0x00000494
  __IO uint32_t SECCFG_CH6;  // off 0x00000498
  __IO uint32_t SECCFG_CH7;  // off 0x0000049c
  __IO uint32_t SECCFG_CH8;  // off 0x000004a0
  __IO uint32_t SECCFG_CH9;  // off 0x000004a4
  __IO uint32_t SECCFG_CH10; // off 0x000004a8
  __IO uint32_t SECCFG_CH11; // off 0x000004ac
  __IO uint32_t SECCFG_CH12; // off 0x000004b0
  __IO uint32_t SECCFG_CH13; // off 0x000004b4
  __IO uint32_t SECCFG_CH14; // off 0x000004b8
  __IO uint32_t SECCFG_CH15; // off 0x000004bc
  __IO uint32_t SECCFG_IRQ0; // off 0x000004c0
  __IO uint32_t SECCFG_IRQ1; // off 0x000004c4
  __IO uint32_t SECCFG_IRQ2; // off 0x000004c8
  __IO uint32_t SECCFG_IRQ3; // off 0x000004cc
  __IO uint32_t SECCFG_MISC; // off 0x000004d0
  __IO uint32_t _pad2[11];
  __IO uint32_t MPU_CTRL; // off 0x00000500
  __IO uint32_t MPU_BAR0; // off 0x00000504
  __IO uint32_t MPU_LAR0; // off 0x00000508
  __IO uint32_t MPU_BAR1; // off 0x0000050c
  __IO uint32_t MPU_LAR1; // off 0x00000510
  __IO uint32_t MPU_BAR2; // off 0x00000514
  __IO uint32_t MPU_LAR2; // off 0x00000518
  __IO uint32_t MPU_BAR3; // off 0x0000051c
  __IO uint32_t MPU_LAR3; // off 0x00000520
  __IO uint32_t MPU_BAR4; // off 0x00000524
  __IO uint32_t MPU_LAR4; // off 0x00000528
  __IO uint32_t MPU_BAR5; // off 0x0000052c
  __IO uint32_t MPU_LAR5; // off 0x00000530
  __IO uint32_t MPU_BAR6; // off 0x00000534
  __IO uint32_t MPU_LAR6; // off 0x00000538
  __IO uint32_t MPU_BAR7; // off 0x0000053c
  __IO uint32_t MPU_LAR7; // off 0x00000540
  __IO uint32_t _pad3[175];
  __IO uint32_t CH0_DBG_CTDREQ; // off 0x00000800
  __IO uint32_t CH0_DBG_TCR;    // off 0x00000804
  __IO uint32_t _pad4[14];
  __IO uint32_t CH1_DBG_CTDREQ; // off 0x00000840
  __IO uint32_t CH1_DBG_TCR;    // off 0x00000844
  __IO uint32_t _pad5[14];
  __IO uint32_t CH2_DBG_CTDREQ; // off 0x00000880
  __IO uint32_t CH2_DBG_TCR;    // off 0x00000884
  __IO uint32_t _pad6[14];
  __IO uint32_t CH3_DBG_CTDREQ; // off 0x000008c0
  __IO uint32_t CH3_DBG_TCR;    // off 0x000008c4
  __IO uint32_t _pad7[14];
  __IO uint32_t CH4_DBG_CTDREQ; // off 0x00000900
  __IO uint32_t CH4_DBG_TCR;    // off 0x00000904
  __IO uint32_t _pad8[14];
  __IO uint32_t CH5_DBG_CTDREQ; // off 0x00000940
  __IO uint32_t CH5_DBG_TCR;    // off 0x00000944
  __IO uint32_t _pad9[14];
  __IO uint32_t CH6_DBG_CTDREQ; // off 0x00000980
  __IO uint32_t CH6_DBG_TCR;    // off 0x00000984
  __IO uint32_t _pad10[14];
  __IO uint32_t CH7_DBG_CTDREQ; // off 0x000009c0
  __IO uint32_t CH7_DBG_TCR;    // off 0x000009c4
  __IO uint32_t _pad11[14];
  __IO uint32_t CH8_DBG_CTDREQ; // off 0x00000a00
  __IO uint32_t CH8_DBG_TCR;    // off 0x00000a04
  __IO uint32_t _pad12[14];
  __IO uint32_t CH9_DBG_CTDREQ; // off 0x00000a40
  __IO uint32_t CH9_DBG_TCR;    // off 0x00000a44
  __IO uint32_t _pad13[14];
  __IO uint32_t CH10_DBG_CTDREQ; // off 0x00000a80
  __IO uint32_t CH10_DBG_TCR;    // off 0x00000a84
  __IO uint32_t _pad14[14];
  __IO uint32_t CH11_DBG_CTDREQ; // off 0x00000ac0
  __IO uint32_t CH11_DBG_TCR;    // off 0x00000ac4
  __IO uint32_t _pad15[14];
  __IO uint32_t CH12_DBG_CTDREQ; // off 0x00000b00
  __IO uint32_t CH12_DBG_TCR;    // off 0x00000b04
  __IO uint32_t _pad16[14];
  __IO uint32_t CH13_DBG_CTDREQ; // off 0x00000b40
  __IO uint32_t CH13_DBG_TCR;    // off 0x00000b44
  __IO uint32_t _pad17[14];
  __IO uint32_t CH14_DBG_CTDREQ; // off 0x00000b80
  __IO uint32_t CH14_DBG_TCR;    // off 0x00000b84
  __IO uint32_t _pad18[14];
  __IO uint32_t CH15_DBG_CTDREQ; // off 0x00000bc0
  __IO uint32_t CH15_DBG_TCR;    // off 0x00000bc4
} DMA_TypeDef;
#define DMA_BASE 0x50000000
#define DMA ((DMA_TypeDef *)DMA_BASE)

typedef struct {
  __IO uint32_t TIMEHW;   // off 0x00000000
  __IO uint32_t TIMELW;   // off 0x00000004
  __IO uint32_t TIMEHR;   // off 0x00000008
  __IO uint32_t TIMELR;   // off 0x0000000c
  __IO uint32_t ALARM0;   // off 0x00000010
  __IO uint32_t ALARM1;   // off 0x00000014
  __IO uint32_t ALARM2;   // off 0x00000018
  __IO uint32_t ALARM3;   // off 0x0000001c
  __IO uint32_t ARMED;    // off 0x00000020
  __IO uint32_t TIMERAWH; // off 0x00000024
  __IO uint32_t TIMERAWL; // off 0x00000028
  __IO uint32_t DBGPAUSE; // off 0x0000002c
  __IO uint32_t PAUSE;    // off 0x00000030
  __IO uint32_t LOCKED;   // off 0x00000034
  __IO uint32_t SOURCE;   // off 0x00000038
  __IO uint32_t INTR;     // off 0x0000003c
  __IO uint32_t INTE;     // off 0x00000040
  __IO uint32_t INTF;     // off 0x00000044
  __IO uint32_t INTS;     // off 0x00000048
} TIMER0_TypeDef;
#define TIMER0_BASE 0x400b0000
#define TIMER0 ((TIMER0_TypeDef *)TIMER0_BASE)

#define TIMER1_BASE 0x400b8000
#define TIMER1 ((TIMER1_TypeDef *)TIMER1_BASE)

typedef struct {
  __IO uint32_t CH0_CSR;   // off 0x00000000
  __IO uint32_t CH0_DIV;   // off 0x00000004
  __IO uint32_t CH0_CTR;   // off 0x00000008
  __IO uint32_t CH0_CC;    // off 0x0000000c
  __IO uint32_t CH0_TOP;   // off 0x00000010
  __IO uint32_t CH1_CSR;   // off 0x00000014
  __IO uint32_t CH1_DIV;   // off 0x00000018
  __IO uint32_t CH1_CTR;   // off 0x0000001c
  __IO uint32_t CH1_CC;    // off 0x00000020
  __IO uint32_t CH1_TOP;   // off 0x00000024
  __IO uint32_t CH2_CSR;   // off 0x00000028
  __IO uint32_t CH2_DIV;   // off 0x0000002c
  __IO uint32_t CH2_CTR;   // off 0x00000030
  __IO uint32_t CH2_CC;    // off 0x00000034
  __IO uint32_t CH2_TOP;   // off 0x00000038
  __IO uint32_t CH3_CSR;   // off 0x0000003c
  __IO uint32_t CH3_DIV;   // off 0x00000040
  __IO uint32_t CH3_CTR;   // off 0x00000044
  __IO uint32_t CH3_CC;    // off 0x00000048
  __IO uint32_t CH3_TOP;   // off 0x0000004c
  __IO uint32_t CH4_CSR;   // off 0x00000050
  __IO uint32_t CH4_DIV;   // off 0x00000054
  __IO uint32_t CH4_CTR;   // off 0x00000058
  __IO uint32_t CH4_CC;    // off 0x0000005c
  __IO uint32_t CH4_TOP;   // off 0x00000060
  __IO uint32_t CH5_CSR;   // off 0x00000064
  __IO uint32_t CH5_DIV;   // off 0x00000068
  __IO uint32_t CH5_CTR;   // off 0x0000006c
  __IO uint32_t CH5_CC;    // off 0x00000070
  __IO uint32_t CH5_TOP;   // off 0x00000074
  __IO uint32_t CH6_CSR;   // off 0x00000078
  __IO uint32_t CH6_DIV;   // off 0x0000007c
  __IO uint32_t CH6_CTR;   // off 0x00000080
  __IO uint32_t CH6_CC;    // off 0x00000084
  __IO uint32_t CH6_TOP;   // off 0x00000088
  __IO uint32_t CH7_CSR;   // off 0x0000008c
  __IO uint32_t CH7_DIV;   // off 0x00000090
  __IO uint32_t CH7_CTR;   // off 0x00000094
  __IO uint32_t CH7_CC;    // off 0x00000098
  __IO uint32_t CH7_TOP;   // off 0x0000009c
  __IO uint32_t CH8_CSR;   // off 0x000000a0
  __IO uint32_t CH8_DIV;   // off 0x000000a4
  __IO uint32_t CH8_CTR;   // off 0x000000a8
  __IO uint32_t CH8_CC;    // off 0x000000ac
  __IO uint32_t CH8_TOP;   // off 0x000000b0
  __IO uint32_t CH9_CSR;   // off 0x000000b4
  __IO uint32_t CH9_DIV;   // off 0x000000b8
  __IO uint32_t CH9_CTR;   // off 0x000000bc
  __IO uint32_t CH9_CC;    // off 0x000000c0
  __IO uint32_t CH9_TOP;   // off 0x000000c4
  __IO uint32_t CH10_CSR;  // off 0x000000c8
  __IO uint32_t CH10_DIV;  // off 0x000000cc
  __IO uint32_t CH10_CTR;  // off 0x000000d0
  __IO uint32_t CH10_CC;   // off 0x000000d4
  __IO uint32_t CH10_TOP;  // off 0x000000d8
  __IO uint32_t CH11_CSR;  // off 0x000000dc
  __IO uint32_t CH11_DIV;  // off 0x000000e0
  __IO uint32_t CH11_CTR;  // off 0x000000e4
  __IO uint32_t CH11_CC;   // off 0x000000e8
  __IO uint32_t CH11_TOP;  // off 0x000000ec
  __IO uint32_t EN;        // off 0x000000f0
  __IO uint32_t INTR;      // off 0x000000f4
  __IO uint32_t IRQ0_INTE; // off 0x000000f8
  __IO uint32_t IRQ0_INTF; // off 0x000000fc
  __IO uint32_t IRQ0_INTS; // off 0x00000100
  __IO uint32_t IRQ1_INTE; // off 0x00000104
  __IO uint32_t IRQ1_INTF; // off 0x00000108
  __IO uint32_t IRQ1_INTS; // off 0x0000010c
} PWM_TypeDef;
#define PWM_BASE 0x400a8000
#define PWM ((PWM_TypeDef *)PWM_BASE)

typedef struct {
  __IO uint32_t CS;     // off 0x00000000
  __IO uint32_t RESULT; // off 0x00000004
  __IO uint32_t FCS;    // off 0x00000008
  __IO uint32_t FIFO;   // off 0x0000000c
  __IO uint32_t DIV;    // off 0x00000010
  __IO uint32_t INTR;   // off 0x00000014
  __IO uint32_t INTE;   // off 0x00000018
  __IO uint32_t INTF;   // off 0x0000001c
  __IO uint32_t INTS;   // off 0x00000020
} ADC_TypeDef;
#define ADC_BASE 0x400a0000
#define ADC ((ADC_TypeDef *)ADC_BASE)

typedef struct {
  __IO uint32_t IC_CON; // off 0x00000000
  __IO uint32_t IC_TAR; // off 0x00000004
  __IO uint32_t IC_SAR; // off 0x00000008
  __IO uint32_t _pad0;
  __IO uint32_t IC_DATA_CMD;    // off 0x00000010
  __IO uint32_t IC_SS_SCL_HCNT; // off 0x00000014
  __IO uint32_t IC_SS_SCL_LCNT; // off 0x00000018
  __IO uint32_t IC_FS_SCL_HCNT; // off 0x0000001c
  __IO uint32_t IC_FS_SCL_LCNT; // off 0x00000020
  __IO uint32_t _pad1[2];
  __IO uint32_t IC_INTR_STAT;          // off 0x0000002c
  __IO uint32_t IC_INTR_MASK;          // off 0x00000030
  __IO uint32_t IC_RAW_INTR_STAT;      // off 0x00000034
  __IO uint32_t IC_RX_TL;              // off 0x00000038
  __IO uint32_t IC_TX_TL;              // off 0x0000003c
  __IO uint32_t IC_CLR_INTR;           // off 0x00000040
  __IO uint32_t IC_CLR_RX_UNDER;       // off 0x00000044
  __IO uint32_t IC_CLR_RX_OVER;        // off 0x00000048
  __IO uint32_t IC_CLR_TX_OVER;        // off 0x0000004c
  __IO uint32_t IC_CLR_RD_REQ;         // off 0x00000050
  __IO uint32_t IC_CLR_TX_ABRT;        // off 0x00000054
  __IO uint32_t IC_CLR_RX_DONE;        // off 0x00000058
  __IO uint32_t IC_CLR_ACTIVITY;       // off 0x0000005c
  __IO uint32_t IC_CLR_STOP_DET;       // off 0x00000060
  __IO uint32_t IC_CLR_START_DET;      // off 0x00000064
  __IO uint32_t IC_CLR_GEN_CALL;       // off 0x00000068
  __IO uint32_t IC_ENABLE;             // off 0x0000006c
  __IO uint32_t IC_STATUS;             // off 0x00000070
  __IO uint32_t IC_TXFLR;              // off 0x00000074
  __IO uint32_t IC_RXFLR;              // off 0x00000078
  __IO uint32_t IC_SDA_HOLD;           // off 0x0000007c
  __IO uint32_t IC_TX_ABRT_SOURCE;     // off 0x00000080
  __IO uint32_t IC_SLV_DATA_NACK_ONLY; // off 0x00000084
  __IO uint32_t IC_DMA_CR;             // off 0x00000088
  __IO uint32_t IC_DMA_TDLR;           // off 0x0000008c
  __IO uint32_t IC_DMA_RDLR;           // off 0x00000090
  __IO uint32_t IC_SDA_SETUP;          // off 0x00000094
  __IO uint32_t IC_ACK_GENERAL_CALL;   // off 0x00000098
  __IO uint32_t IC_ENABLE_STATUS;      // off 0x0000009c
  __IO uint32_t IC_FS_SPKLEN;          // off 0x000000a0
  __IO uint32_t _pad2;
  __IO uint32_t IC_CLR_RESTART_DET; // off 0x000000a8
  __IO uint32_t _pad3[18];
  __IO uint32_t IC_COMP_PARAM_1; // off 0x000000f4
  __IO uint32_t IC_COMP_VERSION; // off 0x000000f8
  __IO uint32_t IC_COMP_TYPE;    // off 0x000000fc
} I2C_TypeDef;
#define I2C0_BASE 0x40090000
#define I2C0 ((I2C_TypeDef *)I2C0_BASE)

#define I2C1_BASE 0x40098000
#define I2C1 ((I2C_TypeDef *)I2C1_BASE)

typedef struct {
  __IO uint32_t SSPCR0;   // off 0x00000000
  __IO uint32_t SSPCR1;   // off 0x00000004
  __IO uint32_t SSPDR;    // off 0x00000008
  __IO uint32_t SSPSR;    // off 0x0000000c
  __IO uint32_t SSPCPSR;  // off 0x00000010
  __IO uint32_t SSPIMSC;  // off 0x00000014
  __IO uint32_t SSPRIS;   // off 0x00000018
  __IO uint32_t SSPMIS;   // off 0x0000001c
  __IO uint32_t SSPICR;   // off 0x00000020
  __IO uint32_t SSPDMACR; // off 0x00000024
  __IO uint32_t _pad0[1006];
  __IO uint32_t SSPPERIPHID0; // off 0x00000fe0
  __IO uint32_t SSPPERIPHID1; // off 0x00000fe4
  __IO uint32_t SSPPERIPHID2; // off 0x00000fe8
  __IO uint32_t SSPPERIPHID3; // off 0x00000fec
  __IO uint32_t SSPPCELLID0;  // off 0x00000ff0
  __IO uint32_t SSPPCELLID1;  // off 0x00000ff4
  __IO uint32_t SSPPCELLID2;  // off 0x00000ff8
  __IO uint32_t SSPPCELLID3;  // off 0x00000ffc
} SPI_TypeDef;
#define SPI0_BASE 0x40080000
#define SPI0 ((SPI_TypeDef *)SPI0_BASE)

#define SPI1_BASE 0x40088000
#define SPI1 ((SPI_TypeDef *)SPI1_BASE)

typedef struct {
  __IO uint32_t CTRL;              // off 0x00000000
  __IO uint32_t FSTAT;             // off 0x00000004
  __IO uint32_t FDEBUG;            // off 0x00000008
  __IO uint32_t FLEVEL;            // off 0x0000000c
  __IO uint32_t TXF0;              // off 0x00000010
  __IO uint32_t TXF1;              // off 0x00000014
  __IO uint32_t TXF2;              // off 0x00000018
  __IO uint32_t TXF3;              // off 0x0000001c
  __IO uint32_t RXF0;              // off 0x00000020
  __IO uint32_t RXF1;              // off 0x00000024
  __IO uint32_t RXF2;              // off 0x00000028
  __IO uint32_t RXF3;              // off 0x0000002c
  __IO uint32_t IRQ;               // off 0x00000030
  __IO uint32_t IRQ_FORCE;         // off 0x00000034
  __IO uint32_t INPUT_SYNC_BYPASS; // off 0x00000038
  __IO uint32_t DBG_PADOUT;        // off 0x0000003c
  __IO uint32_t DBG_PADOE;         // off 0x00000040
  __IO uint32_t DBG_CFGINFO;       // off 0x00000044
  __IO uint32_t INSTR_MEM0;        // off 0x00000048
  __IO uint32_t INSTR_MEM1;        // off 0x0000004c
  __IO uint32_t INSTR_MEM2;        // off 0x00000050
  __IO uint32_t INSTR_MEM3;        // off 0x00000054
  __IO uint32_t INSTR_MEM4;        // off 0x00000058
  __IO uint32_t INSTR_MEM5;        // off 0x0000005c
  __IO uint32_t INSTR_MEM6;        // off 0x00000060
  __IO uint32_t INSTR_MEM7;        // off 0x00000064
  __IO uint32_t INSTR_MEM8;        // off 0x00000068
  __IO uint32_t INSTR_MEM9;        // off 0x0000006c
  __IO uint32_t INSTR_MEM10;       // off 0x00000070
  __IO uint32_t INSTR_MEM11;       // off 0x00000074
  __IO uint32_t INSTR_MEM12;       // off 0x00000078
  __IO uint32_t INSTR_MEM13;       // off 0x0000007c
  __IO uint32_t INSTR_MEM14;       // off 0x00000080
  __IO uint32_t INSTR_MEM15;       // off 0x00000084
  __IO uint32_t INSTR_MEM16;       // off 0x00000088
  __IO uint32_t INSTR_MEM17;       // off 0x0000008c
  __IO uint32_t INSTR_MEM18;       // off 0x00000090
  __IO uint32_t INSTR_MEM19;       // off 0x00000094
  __IO uint32_t INSTR_MEM20;       // off 0x00000098
  __IO uint32_t INSTR_MEM21;       // off 0x0000009c
  __IO uint32_t INSTR_MEM22;       // off 0x000000a0
  __IO uint32_t INSTR_MEM23;       // off 0x000000a4
  __IO uint32_t INSTR_MEM24;       // off 0x000000a8
  __IO uint32_t INSTR_MEM25;       // off 0x000000ac
  __IO uint32_t INSTR_MEM26;       // off 0x000000b0
  __IO uint32_t INSTR_MEM27;       // off 0x000000b4
  __IO uint32_t INSTR_MEM28;       // off 0x000000b8
  __IO uint32_t INSTR_MEM29;       // off 0x000000bc
  __IO uint32_t INSTR_MEM30;       // off 0x000000c0
  __IO uint32_t INSTR_MEM31;       // off 0x000000c4
  __IO uint32_t SM0_CLKDIV;        // off 0x000000c8
  __IO uint32_t SM0_EXECCTRL;      // off 0x000000cc
  __IO uint32_t SM0_SHIFTCTRL;     // off 0x000000d0
  __IO uint32_t SM0_ADDR;          // off 0x000000d4
  __IO uint32_t SM0_INSTR;         // off 0x000000d8
  __IO uint32_t SM0_PINCTRL;       // off 0x000000dc
  __IO uint32_t SM1_CLKDIV;        // off 0x000000e0
  __IO uint32_t SM1_EXECCTRL;      // off 0x000000e4
  __IO uint32_t SM1_SHIFTCTRL;     // off 0x000000e8
  __IO uint32_t SM1_ADDR;          // off 0x000000ec
  __IO uint32_t SM1_INSTR;         // off 0x000000f0
  __IO uint32_t SM1_PINCTRL;       // off 0x000000f4
  __IO uint32_t SM2_CLKDIV;        // off 0x000000f8
  __IO uint32_t SM2_EXECCTRL;      // off 0x000000fc
  __IO uint32_t SM2_SHIFTCTRL;     // off 0x00000100
  __IO uint32_t SM2_ADDR;          // off 0x00000104
  __IO uint32_t SM2_INSTR;         // off 0x00000108
  __IO uint32_t SM2_PINCTRL;       // off 0x0000010c
  __IO uint32_t SM3_CLKDIV;        // off 0x00000110
  __IO uint32_t SM3_EXECCTRL;      // off 0x00000114
  __IO uint32_t SM3_SHIFTCTRL;     // off 0x00000118
  __IO uint32_t SM3_ADDR;          // off 0x0000011c
  __IO uint32_t SM3_INSTR;         // off 0x00000120
  __IO uint32_t SM3_PINCTRL;       // off 0x00000124
  __IO uint32_t RXF0_PUTGET0;      // off 0x00000128
  __IO uint32_t RXF0_PUTGET1;      // off 0x0000012c
  __IO uint32_t RXF0_PUTGET2;      // off 0x00000130
  __IO uint32_t RXF0_PUTGET3;      // off 0x00000134
  __IO uint32_t RXF1_PUTGET0;      // off 0x00000138
  __IO uint32_t RXF1_PUTGET1;      // off 0x0000013c
  __IO uint32_t RXF1_PUTGET2;      // off 0x00000140
  __IO uint32_t RXF1_PUTGET3;      // off 0x00000144
  __IO uint32_t RXF2_PUTGET0;      // off 0x00000148
  __IO uint32_t RXF2_PUTGET1;      // off 0x0000014c
  __IO uint32_t RXF2_PUTGET2;      // off 0x00000150
  __IO uint32_t RXF2_PUTGET3;      // off 0x00000154
  __IO uint32_t RXF3_PUTGET0;      // off 0x00000158
  __IO uint32_t RXF3_PUTGET1;      // off 0x0000015c
  __IO uint32_t RXF3_PUTGET2;      // off 0x00000160
  __IO uint32_t RXF3_PUTGET3;      // off 0x00000164
  __IO uint32_t GPIOBASE;          // off 0x00000168
  __IO uint32_t INTR;              // off 0x0000016c
  __IO uint32_t IRQ0_INTE;         // off 0x00000170
  __IO uint32_t IRQ0_INTF;         // off 0x00000174
  __IO uint32_t IRQ0_INTS;         // off 0x00000178
  __IO uint32_t IRQ1_INTE;         // off 0x0000017c
  __IO uint32_t IRQ1_INTF;         // off 0x00000180
  __IO uint32_t IRQ1_INTS;         // off 0x00000184
} PIO_TypeDef;
#define PIO0_BASE 0x50200000
#define PIO0 ((PIO_TypeDef *)PIO0_BASE)

#define PIO1_BASE 0x50300000
#define PIO1 ((PIO_TypeDef *)PIO1_BASE)

#define PIO2_BASE 0x50400000
#define PIO2 ((PIO_TypeDef *)PIO2_BASE)

typedef struct {
  __IO uint32_t BUS_PRIORITY;     // off 0x00000000
  __IO uint32_t BUS_PRIORITY_ACK; // off 0x00000004
  __IO uint32_t PERFCTR_EN;       // off 0x00000008
  __IO uint32_t PERFCTR0;         // off 0x0000000c
  __IO uint32_t PERFSEL0;         // off 0x00000010
  __IO uint32_t PERFCTR1;         // off 0x00000014
  __IO uint32_t PERFSEL1;         // off 0x00000018
  __IO uint32_t PERFCTR2;         // off 0x0000001c
  __IO uint32_t PERFSEL2;         // off 0x00000020
  __IO uint32_t PERFCTR3;         // off 0x00000024
  __IO uint32_t PERFSEL3;         // off 0x00000028
} BUSCTRL_TypeDef;
#define BUSCTRL_BASE 0x40068000
#define BUSCTRL ((BUSCTRL_TypeDef *)BUSCTRL_BASE)

typedef struct {
  __IO uint32_t CPUID;      // off 0x00000000
  __IO uint32_t GPIO_IN;    // off 0x00000004
  __IO uint32_t GPIO_HI_IN; // off 0x00000008
  __IO uint32_t _pad0;
  __IO uint32_t GPIO_OUT;        // off 0x00000010
  __IO uint32_t GPIO_HI_OUT;     // off 0x00000014
  __IO uint32_t GPIO_OUT_SET;    // off 0x00000018
  __IO uint32_t GPIO_HI_OUT_SET; // off 0x0000001c
  __IO uint32_t GPIO_OUT_CLR;    // off 0x00000020
  __IO uint32_t GPIO_HI_OUT_CLR; // off 0x00000024
  __IO uint32_t GPIO_OUT_XOR;    // off 0x00000028
  __IO uint32_t GPIO_HI_OUT_XOR; // off 0x0000002c
  __IO uint32_t GPIO_OE;         // off 0x00000030
  __IO uint32_t GPIO_HI_OE;      // off 0x00000034
  __IO uint32_t GPIO_OE_SET;     // off 0x00000038
  __IO uint32_t GPIO_HI_OE_SET;  // off 0x0000003c
  __IO uint32_t GPIO_OE_CLR;     // off 0x00000040
  __IO uint32_t GPIO_HI_OE_CLR;  // off 0x00000044
  __IO uint32_t GPIO_OE_XOR;     // off 0x00000048
  __IO uint32_t GPIO_HI_OE_XOR;  // off 0x0000004c
  __IO uint32_t FIFO_ST;         // off 0x00000050
  __IO uint32_t FIFO_WR;         // off 0x00000054
  __IO uint32_t FIFO_RD;         // off 0x00000058
  __IO uint32_t SPINLOCK_ST;     // off 0x0000005c
  __IO uint32_t _pad1[8];
  __IO uint32_t INTERP0_ACCUM0;     // off 0x00000080
  __IO uint32_t INTERP0_ACCUM1;     // off 0x00000084
  __IO uint32_t INTERP0_BASE0;      // off 0x00000088
  __IO uint32_t INTERP0_BASE1;      // off 0x0000008c
  __IO uint32_t INTERP0_BASE2;      // off 0x00000090
  __IO uint32_t INTERP0_POP_LANE0;  // off 0x00000094
  __IO uint32_t INTERP0_POP_LANE1;  // off 0x00000098
  __IO uint32_t INTERP0_POP_FULL;   // off 0x0000009c
  __IO uint32_t INTERP0_PEEK_LANE0; // off 0x000000a0
  __IO uint32_t INTERP0_PEEK_LANE1; // off 0x000000a4
  __IO uint32_t INTERP0_PEEK_FULL;  // off 0x000000a8
  __IO uint32_t INTERP0_CTRL_LANE0; // off 0x000000ac
  __IO uint32_t INTERP0_CTRL_LANE1; // off 0x000000b0
  __IO uint32_t INTERP0_ACCUM0_ADD; // off 0x000000b4
  __IO uint32_t INTERP0_ACCUM1_ADD; // off 0x000000b8
  __IO uint32_t INTERP0_BASE_1AND0; // off 0x000000bc
  __IO uint32_t INTERP1_ACCUM0;     // off 0x000000c0
  __IO uint32_t INTERP1_ACCUM1;     // off 0x000000c4
  __IO uint32_t INTERP1_BASE0;      // off 0x000000c8
  __IO uint32_t INTERP1_BASE1;      // off 0x000000cc
  __IO uint32_t INTERP1_BASE2;      // off 0x000000d0
  __IO uint32_t INTERP1_POP_LANE0;  // off 0x000000d4
  __IO uint32_t INTERP1_POP_LANE1;  // off 0x000000d8
  __IO uint32_t INTERP1_POP_FULL;   // off 0x000000dc
  __IO uint32_t INTERP1_PEEK_LANE0; // off 0x000000e0
  __IO uint32_t INTERP1_PEEK_LANE1; // off 0x000000e4
  __IO uint32_t INTERP1_PEEK_FULL;  // off 0x000000e8
  __IO uint32_t INTERP1_CTRL_LANE0; // off 0x000000ec
  __IO uint32_t INTERP1_CTRL_LANE1; // off 0x000000f0
  __IO uint32_t INTERP1_ACCUM0_ADD; // off 0x000000f4
  __IO uint32_t INTERP1_ACCUM1_ADD; // off 0x000000f8
  __IO uint32_t INTERP1_BASE_1AND0; // off 0x000000fc
  __IO uint32_t SPINLOCK0;          // off 0x00000100
  __IO uint32_t SPINLOCK1;          // off 0x00000104
  __IO uint32_t SPINLOCK2;          // off 0x00000108
  __IO uint32_t SPINLOCK3;          // off 0x0000010c
  __IO uint32_t SPINLOCK4;          // off 0x00000110
  __IO uint32_t SPINLOCK5;          // off 0x00000114
  __IO uint32_t SPINLOCK6;          // off 0x00000118
  __IO uint32_t SPINLOCK7;          // off 0x0000011c
  __IO uint32_t SPINLOCK8;          // off 0x00000120
  __IO uint32_t SPINLOCK9;          // off 0x00000124
  __IO uint32_t SPINLOCK10;         // off 0x00000128
  __IO uint32_t SPINLOCK11;         // off 0x0000012c
  __IO uint32_t SPINLOCK12;         // off 0x00000130
  __IO uint32_t SPINLOCK13;         // off 0x00000134
  __IO uint32_t SPINLOCK14;         // off 0x00000138
  __IO uint32_t SPINLOCK15;         // off 0x0000013c
  __IO uint32_t SPINLOCK16;         // off 0x00000140
  __IO uint32_t SPINLOCK17;         // off 0x00000144
  __IO uint32_t SPINLOCK18;         // off 0x00000148
  __IO uint32_t SPINLOCK19;         // off 0x0000014c
  __IO uint32_t SPINLOCK20;         // off 0x00000150
  __IO uint32_t SPINLOCK21;         // off 0x00000154
  __IO uint32_t SPINLOCK22;         // off 0x00000158
  __IO uint32_t SPINLOCK23;         // off 0x0000015c
  __IO uint32_t SPINLOCK24;         // off 0x00000160
  __IO uint32_t SPINLOCK25;         // off 0x00000164
  __IO uint32_t SPINLOCK26;         // off 0x00000168
  __IO uint32_t SPINLOCK27;         // off 0x0000016c
  __IO uint32_t SPINLOCK28;         // off 0x00000170
  __IO uint32_t SPINLOCK29;         // off 0x00000174
  __IO uint32_t SPINLOCK30;         // off 0x00000178
  __IO uint32_t SPINLOCK31;         // off 0x0000017c
  __IO uint32_t DOORBELL_OUT_SET;   // off 0x00000180
  __IO uint32_t DOORBELL_OUT_CLR;   // off 0x00000184
  __IO uint32_t DOORBELL_IN_SET;    // off 0x00000188
  __IO uint32_t DOORBELL_IN_CLR;    // off 0x0000018c
  __IO uint32_t PERI_NONSEC;        // off 0x00000190
  __IO uint32_t _pad2[3];
  __IO uint32_t RISCV_SOFTIRQ; // off 0x000001a0
  __IO uint32_t MTIME_CTRL;    // off 0x000001a4
  __IO uint32_t _pad3[2];
  __IO uint32_t MTIME;               // off 0x000001b0
  __IO uint32_t MTIMEH;              // off 0x000001b4
  __IO uint32_t MTIMECMP;            // off 0x000001b8
  __IO uint32_t MTIMECMPH;           // off 0x000001bc
  __IO uint32_t TMDS_CTRL;           // off 0x000001c0
  __IO uint32_t TMDS_WDATA;          // off 0x000001c4
  __IO uint32_t TMDS_PEEK_SINGLE;    // off 0x000001c8
  __IO uint32_t TMDS_POP_SINGLE;     // off 0x000001cc
  __IO uint32_t TMDS_PEEK_DOUBLE_L0; // off 0x000001d0
  __IO uint32_t TMDS_POP_DOUBLE_L0;  // off 0x000001d4
  __IO uint32_t TMDS_PEEK_DOUBLE_L1; // off 0x000001d8
  __IO uint32_t TMDS_POP_DOUBLE_L1;  // off 0x000001dc
  __IO uint32_t TMDS_PEEK_DOUBLE_L2; // off 0x000001e0
  __IO uint32_t TMDS_POP_DOUBLE_L2;  // off 0x000001e4
} SIO_TypeDef;
#define SIO_BASE 0xd0000000
#define SIO ((SIO_TypeDef *)SIO_BASE)

#define SIO_NS_BASE 0xd0020000
#define SIO_NS ((SIO_NS_TypeDef *)SIO_NS_BASE)

typedef struct {
  __IO uint32_t _pad0[512];
  __IO uint32_t WRITE_ONCE0;   // off 0x00000800
  __IO uint32_t WRITE_ONCE1;   // off 0x00000804
  __IO uint32_t BOOTLOCK_STAT; // off 0x00000808
  __IO uint32_t BOOTLOCK0;     // off 0x0000080c
  __IO uint32_t BOOTLOCK1;     // off 0x00000810
  __IO uint32_t BOOTLOCK2;     // off 0x00000814
  __IO uint32_t BOOTLOCK3;     // off 0x00000818
  __IO uint32_t BOOTLOCK4;     // off 0x0000081c
  __IO uint32_t BOOTLOCK5;     // off 0x00000820
  __IO uint32_t BOOTLOCK6;     // off 0x00000824
  __IO uint32_t BOOTLOCK7;     // off 0x00000828
} BOOTRAM_TypeDef;
#define BOOTRAM_BASE 0x400e0000
#define BOOTRAM ((BOOTRAM_TypeDef *)BOOTRAM_BASE)

typedef struct {
  __IO uint32_t CTRL_STATUS;        // off 0x00000000
  __IO uint32_t TRACE_CAPTURE_FIFO; // off 0x00000004
} CORESIGHT_TRACE_TypeDef;
#define CORESIGHT_TRACE_BASE 0x50700000
#define CORESIGHT_TRACE ((CORESIGHT_TRACE_TypeDef *)CORESIGHT_TRACE_BASE)

typedef struct {
  __IO uint32_t ADDR_ENDP;              // off 0x00000000
  __IO uint32_t ADDR_ENDP1;             // off 0x00000004
  __IO uint32_t ADDR_ENDP2;             // off 0x00000008
  __IO uint32_t ADDR_ENDP3;             // off 0x0000000c
  __IO uint32_t ADDR_ENDP4;             // off 0x00000010
  __IO uint32_t ADDR_ENDP5;             // off 0x00000014
  __IO uint32_t ADDR_ENDP6;             // off 0x00000018
  __IO uint32_t ADDR_ENDP7;             // off 0x0000001c
  __IO uint32_t ADDR_ENDP8;             // off 0x00000020
  __IO uint32_t ADDR_ENDP9;             // off 0x00000024
  __IO uint32_t ADDR_ENDP10;            // off 0x00000028
  __IO uint32_t ADDR_ENDP11;            // off 0x0000002c
  __IO uint32_t ADDR_ENDP12;            // off 0x00000030
  __IO uint32_t ADDR_ENDP13;            // off 0x00000034
  __IO uint32_t ADDR_ENDP14;            // off 0x00000038
  __IO uint32_t ADDR_ENDP15;            // off 0x0000003c
  __IO uint32_t MAIN_CTRL;              // off 0x00000040
  __IO uint32_t SOF_WR;                 // off 0x00000044
  __IO uint32_t SOF_RD;                 // off 0x00000048
  __IO uint32_t SIE_CTRL;               // off 0x0000004c
  __IO uint32_t SIE_STATUS;             // off 0x00000050
  __IO uint32_t INT_EP_CTRL;            // off 0x00000054
  __IO uint32_t BUFF_STATUS;            // off 0x00000058
  __IO uint32_t BUFF_CPU_SHOULD_HANDLE; // off 0x0000005c
  __IO uint32_t EP_ABORT;               // off 0x00000060
  __IO uint32_t EP_ABORT_DONE;          // off 0x00000064
  __IO uint32_t EP_STALL_ARM;           // off 0x00000068
  __IO uint32_t NAK_POLL;               // off 0x0000006c
  __IO uint32_t EP_STATUS_STALL_NAK;    // off 0x00000070
  __IO uint32_t USB_MUXING;             // off 0x00000074
  __IO uint32_t USB_PWR;                // off 0x00000078
  __IO uint32_t USBPHY_DIRECT;          // off 0x0000007c
  __IO uint32_t USBPHY_DIRECT_OVERRIDE; // off 0x00000080
  __IO uint32_t USBPHY_TRIM;            // off 0x00000084
  __IO uint32_t LINESTATE_TUNING;       // off 0x00000088
  __IO uint32_t INTR;                   // off 0x0000008c
  __IO uint32_t INTE;                   // off 0x00000090
  __IO uint32_t INTF;                   // off 0x00000094
  __IO uint32_t INTS;                   // off 0x00000098
  __IO uint32_t _pad0[25];
  __IO uint32_t SOF_TIMESTAMP_RAW;  // off 0x00000100
  __IO uint32_t SOF_TIMESTAMP_LAST; // off 0x00000104
  __IO uint32_t SM_STATE;           // off 0x00000108
  __IO uint32_t EP_TX_ERROR;        // off 0x0000010c
  __IO uint32_t EP_RX_ERROR;        // off 0x00000110
  __IO uint32_t DEV_SM_WATCHDOG;    // off 0x00000114
} USB_TypeDef;
#define USB_BASE 0x50110000
#define USB ((USB_TypeDef *)USB_BASE)

typedef struct {
  __IO uint32_t _pad0[64];
  __IO uint32_t RNG_IMR;            // off 0x00000100
  __IO uint32_t RNG_ISR;            // off 0x00000104
  __IO uint32_t RNG_ICR;            // off 0x00000108
  __IO uint32_t TRNG_CONFIG;        // off 0x0000010c
  __IO uint32_t TRNG_VALID;         // off 0x00000110
  __IO uint32_t EHR_DATA0;          // off 0x00000114
  __IO uint32_t EHR_DATA1;          // off 0x00000118
  __IO uint32_t EHR_DATA2;          // off 0x0000011c
  __IO uint32_t EHR_DATA3;          // off 0x00000120
  __IO uint32_t EHR_DATA4;          // off 0x00000124
  __IO uint32_t EHR_DATA5;          // off 0x00000128
  __IO uint32_t RND_SOURCE_ENABLE;  // off 0x0000012c
  __IO uint32_t SAMPLE_CNT1;        // off 0x00000130
  __IO uint32_t AUTOCORR_STATISTIC; // off 0x00000134
  __IO uint32_t TRNG_DEBUG_CONTROL; // off 0x00000138
  __IO uint32_t _pad1;
  __IO uint32_t TRNG_SW_RESET; // off 0x00000140
  __IO uint32_t _pad2[28];
  __IO uint32_t RNG_DEBUG_EN_INPUT; // off 0x000001b4
  __IO uint32_t TRNG_BUSY;          // off 0x000001b8
  __IO uint32_t RST_BITS_COUNTER;   // off 0x000001bc
  __IO uint32_t RNG_VERSION;        // off 0x000001c0
  __IO uint32_t _pad3[7];
  __IO uint32_t RNG_BIST_CNTR_0; // off 0x000001e0
  __IO uint32_t RNG_BIST_CNTR_1; // off 0x000001e4
  __IO uint32_t RNG_BIST_CNTR_2; // off 0x000001e8
} TRNG_TypeDef;
#define TRNG_BASE 0x400f0000
#define TRNG ((TRNG_TypeDef *)TRNG_BASE)

typedef struct {
  __IO uint32_t ARM;         // off 0x00000000
  __IO uint32_t DISARM;      // off 0x00000004
  __IO uint32_t SENSITIVITY; // off 0x00000008
  __IO uint32_t LOCK;        // off 0x0000000c
  __IO uint32_t TRIG_STATUS; // off 0x00000010
  __IO uint32_t TRIG_FORCE;  // off 0x00000014
} GLITCH_DETECTOR_TypeDef;
#define GLITCH_DETECTOR_BASE 0x40158000
#define GLITCH_DETECTOR ((GLITCH_DETECTOR_TypeDef *)GLITCH_DETECTOR_BASE)

typedef struct {
  __IO uint32_t SW_LOCK0;     // off 0x00000000
  __IO uint32_t SW_LOCK1;     // off 0x00000004
  __IO uint32_t SW_LOCK2;     // off 0x00000008
  __IO uint32_t SW_LOCK3;     // off 0x0000000c
  __IO uint32_t SW_LOCK4;     // off 0x00000010
  __IO uint32_t SW_LOCK5;     // off 0x00000014
  __IO uint32_t SW_LOCK6;     // off 0x00000018
  __IO uint32_t SW_LOCK7;     // off 0x0000001c
  __IO uint32_t SW_LOCK8;     // off 0x00000020
  __IO uint32_t SW_LOCK9;     // off 0x00000024
  __IO uint32_t SW_LOCK10;    // off 0x00000028
  __IO uint32_t SW_LOCK11;    // off 0x0000002c
  __IO uint32_t SW_LOCK12;    // off 0x00000030
  __IO uint32_t SW_LOCK13;    // off 0x00000034
  __IO uint32_t SW_LOCK14;    // off 0x00000038
  __IO uint32_t SW_LOCK15;    // off 0x0000003c
  __IO uint32_t SW_LOCK16;    // off 0x00000040
  __IO uint32_t SW_LOCK17;    // off 0x00000044
  __IO uint32_t SW_LOCK18;    // off 0x00000048
  __IO uint32_t SW_LOCK19;    // off 0x0000004c
  __IO uint32_t SW_LOCK20;    // off 0x00000050
  __IO uint32_t SW_LOCK21;    // off 0x00000054
  __IO uint32_t SW_LOCK22;    // off 0x00000058
  __IO uint32_t SW_LOCK23;    // off 0x0000005c
  __IO uint32_t SW_LOCK24;    // off 0x00000060
  __IO uint32_t SW_LOCK25;    // off 0x00000064
  __IO uint32_t SW_LOCK26;    // off 0x00000068
  __IO uint32_t SW_LOCK27;    // off 0x0000006c
  __IO uint32_t SW_LOCK28;    // off 0x00000070
  __IO uint32_t SW_LOCK29;    // off 0x00000074
  __IO uint32_t SW_LOCK30;    // off 0x00000078
  __IO uint32_t SW_LOCK31;    // off 0x0000007c
  __IO uint32_t SW_LOCK32;    // off 0x00000080
  __IO uint32_t SW_LOCK33;    // off 0x00000084
  __IO uint32_t SW_LOCK34;    // off 0x00000088
  __IO uint32_t SW_LOCK35;    // off 0x0000008c
  __IO uint32_t SW_LOCK36;    // off 0x00000090
  __IO uint32_t SW_LOCK37;    // off 0x00000094
  __IO uint32_t SW_LOCK38;    // off 0x00000098
  __IO uint32_t SW_LOCK39;    // off 0x0000009c
  __IO uint32_t SW_LOCK40;    // off 0x000000a0
  __IO uint32_t SW_LOCK41;    // off 0x000000a4
  __IO uint32_t SW_LOCK42;    // off 0x000000a8
  __IO uint32_t SW_LOCK43;    // off 0x000000ac
  __IO uint32_t SW_LOCK44;    // off 0x000000b0
  __IO uint32_t SW_LOCK45;    // off 0x000000b4
  __IO uint32_t SW_LOCK46;    // off 0x000000b8
  __IO uint32_t SW_LOCK47;    // off 0x000000bc
  __IO uint32_t SW_LOCK48;    // off 0x000000c0
  __IO uint32_t SW_LOCK49;    // off 0x000000c4
  __IO uint32_t SW_LOCK50;    // off 0x000000c8
  __IO uint32_t SW_LOCK51;    // off 0x000000cc
  __IO uint32_t SW_LOCK52;    // off 0x000000d0
  __IO uint32_t SW_LOCK53;    // off 0x000000d4
  __IO uint32_t SW_LOCK54;    // off 0x000000d8
  __IO uint32_t SW_LOCK55;    // off 0x000000dc
  __IO uint32_t SW_LOCK56;    // off 0x000000e0
  __IO uint32_t SW_LOCK57;    // off 0x000000e4
  __IO uint32_t SW_LOCK58;    // off 0x000000e8
  __IO uint32_t SW_LOCK59;    // off 0x000000ec
  __IO uint32_t SW_LOCK60;    // off 0x000000f0
  __IO uint32_t SW_LOCK61;    // off 0x000000f4
  __IO uint32_t SW_LOCK62;    // off 0x000000f8
  __IO uint32_t SW_LOCK63;    // off 0x000000fc
  __IO uint32_t SBPI_INSTR;   // off 0x00000100
  __IO uint32_t SBPI_WDATA_0; // off 0x00000104
  __IO uint32_t SBPI_WDATA_1; // off 0x00000108
  __IO uint32_t SBPI_WDATA_2; // off 0x0000010c
  __IO uint32_t SBPI_WDATA_3; // off 0x00000110
  __IO uint32_t SBPI_RDATA_0; // off 0x00000114
  __IO uint32_t SBPI_RDATA_1; // off 0x00000118
  __IO uint32_t SBPI_RDATA_2; // off 0x0000011c
  __IO uint32_t SBPI_RDATA_3; // off 0x00000120
  __IO uint32_t SBPI_STATUS;  // off 0x00000124
  __IO uint32_t USR;          // off 0x00000128
  __IO uint32_t DBG;          // off 0x0000012c
  __IO uint32_t _pad0;
  __IO uint32_t BIST;           // off 0x00000134
  __IO uint32_t CRT_KEY_W0;     // off 0x00000138
  __IO uint32_t CRT_KEY_W1;     // off 0x0000013c
  __IO uint32_t CRT_KEY_W2;     // off 0x00000140
  __IO uint32_t CRT_KEY_W3;     // off 0x00000144
  __IO uint32_t CRITICAL;       // off 0x00000148
  __IO uint32_t KEY_VALID;      // off 0x0000014c
  __IO uint32_t DEBUGEN;        // off 0x00000150
  __IO uint32_t DEBUGEN_LOCK;   // off 0x00000154
  __IO uint32_t ARCHSEL;        // off 0x00000158
  __IO uint32_t ARCHSEL_STATUS; // off 0x0000015c
  __IO uint32_t BOOTDIS;        // off 0x00000160
  __IO uint32_t INTR;           // off 0x00000164
  __IO uint32_t INTE;           // off 0x00000168
  __IO uint32_t INTF;           // off 0x0000016c
  __IO uint32_t INTS;           // off 0x00000170
} OTP_TypeDef;
#define OTP_BASE 0x40120000
#define OTP ((OTP_TypeDef *)OTP_BASE)

typedef struct {
  __IO uint32_t CHIPID0; // off 0x0000
  __IO uint32_t CHIPID1; // off 0x0002
  __IO uint32_t CHIPID2; // off 0x0004
  __IO uint32_t CHIPID3; // off 0x0006
  __IO uint32_t RANDID0; // off 0x0008
  __IO uint32_t RANDID1; // off 0x000a
  __IO uint32_t RANDID2; // off 0x000c
  __IO uint32_t RANDID3; // off 0x000e
  __IO uint32_t RANDID4; // off 0x0010
  __IO uint32_t RANDID5; // off 0x0012
  __IO uint32_t RANDID6; // off 0x0014
  __IO uint32_t RANDID7; // off 0x0016
  __IO uint32_t _pad0;
  __IO uint32_t ROSC_CALIB;  // off 0x0020
  __IO uint32_t LPOSC_CALIB; // off 0x0022
  __IO uint32_t _pad1[2];
  __IO uint32_t NUM_GPIOS; // off 0x0030
  __IO uint32_t _pad2[14];
  __IO uint32_t INFO_CRC0; // off 0x006c
  __IO uint32_t INFO_CRC1; // off 0x006e
  __IO uint32_t _pad3[13];
  __IO uint32_t FLASH_DEVINFO;             // off 0x00a8
  __IO uint32_t FLASH_PARTITION_SLOT_SIZE; // off 0x00aa
  __IO uint32_t BOOTSEL_LED_CFG;           // off 0x00ac
  __IO uint32_t BOOTSEL_PLL_CFG;           // off 0x00ae
  __IO uint32_t BOOTSEL_XOSC_CFG;          // off 0x00b0
  __IO uint32_t _pad4;
  __IO uint32_t USB_WHITE_LABEL_ADDR; // off 0x00b8
  __IO uint32_t OTPBOOT_SRC;          // off 0x00bc
  __IO uint32_t OTPBOOT_LEN;          // off 0x00be
  __IO uint32_t OTPBOOT_DST0;         // off 0x00c0
  __IO uint32_t OTPBOOT_DST1;         // off 0x00c2
  __IO uint32_t _pad5[14];
  __IO uint32_t BOOTKEY0_0;  // off 0x0100
  __IO uint32_t BOOTKEY0_1;  // off 0x0102
  __IO uint32_t BOOTKEY0_2;  // off 0x0104
  __IO uint32_t BOOTKEY0_3;  // off 0x0106
  __IO uint32_t BOOTKEY0_4;  // off 0x0108
  __IO uint32_t BOOTKEY0_5;  // off 0x010a
  __IO uint32_t BOOTKEY0_6;  // off 0x010c
  __IO uint32_t BOOTKEY0_7;  // off 0x010e
  __IO uint32_t BOOTKEY0_8;  // off 0x0110
  __IO uint32_t BOOTKEY0_9;  // off 0x0112
  __IO uint32_t BOOTKEY0_10; // off 0x0114
  __IO uint32_t BOOTKEY0_11; // off 0x0116
  __IO uint32_t BOOTKEY0_12; // off 0x0118
  __IO uint32_t BOOTKEY0_13; // off 0x011a
  __IO uint32_t BOOTKEY0_14; // off 0x011c
  __IO uint32_t BOOTKEY0_15; // off 0x011e
  __IO uint32_t BOOTKEY1_0;  // off 0x0120
  __IO uint32_t BOOTKEY1_1;  // off 0x0122
  __IO uint32_t BOOTKEY1_2;  // off 0x0124
  __IO uint32_t BOOTKEY1_3;  // off 0x0126
  __IO uint32_t BOOTKEY1_4;  // off 0x0128
  __IO uint32_t BOOTKEY1_5;  // off 0x012a
  __IO uint32_t BOOTKEY1_6;  // off 0x012c
  __IO uint32_t BOOTKEY1_7;  // off 0x012e
  __IO uint32_t BOOTKEY1_8;  // off 0x0130
  __IO uint32_t BOOTKEY1_9;  // off 0x0132
  __IO uint32_t BOOTKEY1_10; // off 0x0134
  __IO uint32_t BOOTKEY1_11; // off 0x0136
  __IO uint32_t BOOTKEY1_12; // off 0x0138
  __IO uint32_t BOOTKEY1_13; // off 0x013a
  __IO uint32_t BOOTKEY1_14; // off 0x013c
  __IO uint32_t BOOTKEY1_15; // off 0x013e
  __IO uint32_t BOOTKEY2_0;  // off 0x0140
  __IO uint32_t BOOTKEY2_1;  // off 0x0142
  __IO uint32_t BOOTKEY2_2;  // off 0x0144
  __IO uint32_t BOOTKEY2_3;  // off 0x0146
  __IO uint32_t BOOTKEY2_4;  // off 0x0148
  __IO uint32_t BOOTKEY2_5;  // off 0x014a
  __IO uint32_t BOOTKEY2_6;  // off 0x014c
  __IO uint32_t BOOTKEY2_7;  // off 0x014e
  __IO uint32_t BOOTKEY2_8;  // off 0x0150
  __IO uint32_t BOOTKEY2_9;  // off 0x0152
  __IO uint32_t BOOTKEY2_10; // off 0x0154
  __IO uint32_t BOOTKEY2_11; // off 0x0156
  __IO uint32_t BOOTKEY2_12; // off 0x0158
  __IO uint32_t BOOTKEY2_13; // off 0x015a
  __IO uint32_t BOOTKEY2_14; // off 0x015c
  __IO uint32_t BOOTKEY2_15; // off 0x015e
  __IO uint32_t BOOTKEY3_0;  // off 0x0160
  __IO uint32_t BOOTKEY3_1;  // off 0x0162
  __IO uint32_t BOOTKEY3_2;  // off 0x0164
  __IO uint32_t BOOTKEY3_3;  // off 0x0166
  __IO uint32_t BOOTKEY3_4;  // off 0x0168
  __IO uint32_t BOOTKEY3_5;  // off 0x016a
  __IO uint32_t BOOTKEY3_6;  // off 0x016c
  __IO uint32_t BOOTKEY3_7;  // off 0x016e
  __IO uint32_t BOOTKEY3_8;  // off 0x0170
  __IO uint32_t BOOTKEY3_9;  // off 0x0172
  __IO uint32_t BOOTKEY3_10; // off 0x0174
  __IO uint32_t BOOTKEY3_11; // off 0x0176
  __IO uint32_t BOOTKEY3_12; // off 0x0178
  __IO uint32_t BOOTKEY3_13; // off 0x017a
  __IO uint32_t BOOTKEY3_14; // off 0x017c
  __IO uint32_t BOOTKEY3_15; // off 0x017e
  __IO uint32_t _pad6[1859];
  __IO uint32_t KEY1_0; // off 0x1e90
  __IO uint32_t KEY1_1; // off 0x1e92
  __IO uint32_t KEY1_2; // off 0x1e94
  __IO uint32_t KEY1_3; // off 0x1e96
  __IO uint32_t KEY1_4; // off 0x1e98
  __IO uint32_t KEY1_5; // off 0x1e9a
  __IO uint32_t KEY1_6; // off 0x1e9c
  __IO uint32_t KEY1_7; // off 0x1e9e
  __IO uint32_t KEY2_0; // off 0x1ea0
  __IO uint32_t KEY2_1; // off 0x1ea2
  __IO uint32_t KEY2_2; // off 0x1ea4
  __IO uint32_t KEY2_3; // off 0x1ea6
  __IO uint32_t KEY2_4; // off 0x1ea8
  __IO uint32_t KEY2_5; // off 0x1eaa
  __IO uint32_t KEY2_6; // off 0x1eac
  __IO uint32_t KEY2_7; // off 0x1eae
  __IO uint32_t KEY3_0; // off 0x1eb0
  __IO uint32_t KEY3_1; // off 0x1eb2
  __IO uint32_t KEY3_2; // off 0x1eb4
  __IO uint32_t KEY3_3; // off 0x1eb6
  __IO uint32_t KEY3_4; // off 0x1eb8
  __IO uint32_t KEY3_5; // off 0x1eba
  __IO uint32_t KEY3_6; // off 0x1ebc
  __IO uint32_t KEY3_7; // off 0x1ebe
  __IO uint32_t KEY4_0; // off 0x1ec0
  __IO uint32_t KEY4_1; // off 0x1ec2
  __IO uint32_t KEY4_2; // off 0x1ec4
  __IO uint32_t KEY4_3; // off 0x1ec6
  __IO uint32_t KEY4_4; // off 0x1ec8
  __IO uint32_t KEY4_5; // off 0x1eca
  __IO uint32_t KEY4_6; // off 0x1ecc
  __IO uint32_t KEY4_7; // off 0x1ece
  __IO uint32_t KEY5_0; // off 0x1ed0
  __IO uint32_t KEY5_1; // off 0x1ed2
  __IO uint32_t KEY5_2; // off 0x1ed4
  __IO uint32_t KEY5_3; // off 0x1ed6
  __IO uint32_t KEY5_4; // off 0x1ed8
  __IO uint32_t KEY5_5; // off 0x1eda
  __IO uint32_t KEY5_6; // off 0x1edc
  __IO uint32_t KEY5_7; // off 0x1ede
  __IO uint32_t KEY6_0; // off 0x1ee0
  __IO uint32_t KEY6_1; // off 0x1ee2
  __IO uint32_t KEY6_2; // off 0x1ee4
  __IO uint32_t KEY6_3; // off 0x1ee6
  __IO uint32_t KEY6_4; // off 0x1ee8
  __IO uint32_t KEY6_5; // off 0x1eea
  __IO uint32_t KEY6_6; // off 0x1eec
  __IO uint32_t KEY6_7; // off 0x1eee
} OTP_DATA_TypeDef;
#define OTP_DATA_BASE 0x40130000
#define OTP_DATA ((OTP_DATA_TypeDef *)OTP_DATA_BASE)

typedef struct {
  __IO uint32_t CHIPID0; // off 0x00000000
  __IO uint32_t CHIPID1; // off 0x00000004
  __IO uint32_t CHIPID2; // off 0x00000008
  __IO uint32_t CHIPID3; // off 0x0000000c
  __IO uint32_t RANDID0; // off 0x00000010
  __IO uint32_t RANDID1; // off 0x00000014
  __IO uint32_t RANDID2; // off 0x00000018
  __IO uint32_t RANDID3; // off 0x0000001c
  __IO uint32_t RANDID4; // off 0x00000020
  __IO uint32_t RANDID5; // off 0x00000024
  __IO uint32_t RANDID6; // off 0x00000028
  __IO uint32_t RANDID7; // off 0x0000002c
  __IO uint32_t _pad0[4];
  __IO uint32_t ROSC_CALIB;  // off 0x00000040
  __IO uint32_t LPOSC_CALIB; // off 0x00000044
  __IO uint32_t _pad1[6];
  __IO uint32_t NUM_GPIOS; // off 0x00000060
  __IO uint32_t _pad2[29];
  __IO uint32_t INFO_CRC0;                 // off 0x000000d8
  __IO uint32_t INFO_CRC1;                 // off 0x000000dc
  __IO uint32_t CRIT0;                     // off 0x000000e0
  __IO uint32_t CRIT0_R1;                  // off 0x000000e4
  __IO uint32_t CRIT0_R2;                  // off 0x000000e8
  __IO uint32_t CRIT0_R3;                  // off 0x000000ec
  __IO uint32_t CRIT0_R4;                  // off 0x000000f0
  __IO uint32_t CRIT0_R5;                  // off 0x000000f4
  __IO uint32_t CRIT0_R6;                  // off 0x000000f8
  __IO uint32_t CRIT0_R7;                  // off 0x000000fc
  __IO uint32_t CRIT1;                     // off 0x00000100
  __IO uint32_t CRIT1_R1;                  // off 0x00000104
  __IO uint32_t CRIT1_R2;                  // off 0x00000108
  __IO uint32_t CRIT1_R3;                  // off 0x0000010c
  __IO uint32_t CRIT1_R4;                  // off 0x00000110
  __IO uint32_t CRIT1_R5;                  // off 0x00000114
  __IO uint32_t CRIT1_R6;                  // off 0x00000118
  __IO uint32_t CRIT1_R7;                  // off 0x0000011c
  __IO uint32_t BOOT_FLAGS0;               // off 0x00000120
  __IO uint32_t BOOT_FLAGS0_R1;            // off 0x00000124
  __IO uint32_t BOOT_FLAGS0_R2;            // off 0x00000128
  __IO uint32_t BOOT_FLAGS1;               // off 0x0000012c
  __IO uint32_t BOOT_FLAGS1_R1;            // off 0x00000130
  __IO uint32_t BOOT_FLAGS1_R2;            // off 0x00000134
  __IO uint32_t DEFAULT_BOOT_VERSION0;     // off 0x00000138
  __IO uint32_t DEFAULT_BOOT_VERSION0_R1;  // off 0x0000013c
  __IO uint32_t DEFAULT_BOOT_VERSION0_R2;  // off 0x00000140
  __IO uint32_t DEFAULT_BOOT_VERSION1;     // off 0x00000144
  __IO uint32_t DEFAULT_BOOT_VERSION1_R1;  // off 0x00000148
  __IO uint32_t DEFAULT_BOOT_VERSION1_R2;  // off 0x0000014c
  __IO uint32_t FLASH_DEVINFO;             // off 0x00000150
  __IO uint32_t FLASH_PARTITION_SLOT_SIZE; // off 0x00000154
  __IO uint32_t BOOTSEL_LED_CFG;           // off 0x00000158
  __IO uint32_t BOOTSEL_PLL_CFG;           // off 0x0000015c
  __IO uint32_t BOOTSEL_XOSC_CFG;          // off 0x00000160
  __IO uint32_t USB_BOOT_FLAGS;            // off 0x00000164
  __IO uint32_t USB_BOOT_FLAGS_R1;         // off 0x00000168
  __IO uint32_t USB_BOOT_FLAGS_R2;         // off 0x0000016c
  __IO uint32_t USB_WHITE_LABEL_ADDR;      // off 0x00000170
  __IO uint32_t _pad3;
  __IO uint32_t OTPBOOT_SRC;  // off 0x00000178
  __IO uint32_t OTPBOOT_LEN;  // off 0x0000017c
  __IO uint32_t OTPBOOT_DST0; // off 0x00000180
  __IO uint32_t OTPBOOT_DST1; // off 0x00000184
  __IO uint32_t _pad4[30];
  __IO uint32_t BOOTKEY0_0;  // off 0x00000200
  __IO uint32_t BOOTKEY0_1;  // off 0x00000204
  __IO uint32_t BOOTKEY0_2;  // off 0x00000208
  __IO uint32_t BOOTKEY0_3;  // off 0x0000020c
  __IO uint32_t BOOTKEY0_4;  // off 0x00000210
  __IO uint32_t BOOTKEY0_5;  // off 0x00000214
  __IO uint32_t BOOTKEY0_6;  // off 0x00000218
  __IO uint32_t BOOTKEY0_7;  // off 0x0000021c
  __IO uint32_t BOOTKEY0_8;  // off 0x00000220
  __IO uint32_t BOOTKEY0_9;  // off 0x00000224
  __IO uint32_t BOOTKEY0_10; // off 0x00000228
  __IO uint32_t BOOTKEY0_11; // off 0x0000022c
  __IO uint32_t BOOTKEY0_12; // off 0x00000230
  __IO uint32_t BOOTKEY0_13; // off 0x00000234
  __IO uint32_t BOOTKEY0_14; // off 0x00000238
  __IO uint32_t BOOTKEY0_15; // off 0x0000023c
  __IO uint32_t BOOTKEY1_0;  // off 0x00000240
  __IO uint32_t BOOTKEY1_1;  // off 0x00000244
  __IO uint32_t BOOTKEY1_2;  // off 0x00000248
  __IO uint32_t BOOTKEY1_3;  // off 0x0000024c
  __IO uint32_t BOOTKEY1_4;  // off 0x00000250
  __IO uint32_t BOOTKEY1_5;  // off 0x00000254
  __IO uint32_t BOOTKEY1_6;  // off 0x00000258
  __IO uint32_t BOOTKEY1_7;  // off 0x0000025c
  __IO uint32_t BOOTKEY1_8;  // off 0x00000260
  __IO uint32_t BOOTKEY1_9;  // off 0x00000264
  __IO uint32_t BOOTKEY1_10; // off 0x00000268
  __IO uint32_t BOOTKEY1_11; // off 0x0000026c
  __IO uint32_t BOOTKEY1_12; // off 0x00000270
  __IO uint32_t BOOTKEY1_13; // off 0x00000274
  __IO uint32_t BOOTKEY1_14; // off 0x00000278
  __IO uint32_t BOOTKEY1_15; // off 0x0000027c
  __IO uint32_t BOOTKEY2_0;  // off 0x00000280
  __IO uint32_t BOOTKEY2_1;  // off 0x00000284
  __IO uint32_t BOOTKEY2_2;  // off 0x00000288
  __IO uint32_t BOOTKEY2_3;  // off 0x0000028c
  __IO uint32_t BOOTKEY2_4;  // off 0x00000290
  __IO uint32_t BOOTKEY2_5;  // off 0x00000294
  __IO uint32_t BOOTKEY2_6;  // off 0x00000298
  __IO uint32_t BOOTKEY2_7;  // off 0x0000029c
  __IO uint32_t BOOTKEY2_8;  // off 0x000002a0
  __IO uint32_t BOOTKEY2_9;  // off 0x000002a4
  __IO uint32_t BOOTKEY2_10; // off 0x000002a8
  __IO uint32_t BOOTKEY2_11; // off 0x000002ac
  __IO uint32_t BOOTKEY2_12; // off 0x000002b0
  __IO uint32_t BOOTKEY2_13; // off 0x000002b4
  __IO uint32_t BOOTKEY2_14; // off 0x000002b8
  __IO uint32_t BOOTKEY2_15; // off 0x000002bc
  __IO uint32_t BOOTKEY3_0;  // off 0x000002c0
  __IO uint32_t BOOTKEY3_1;  // off 0x000002c4
  __IO uint32_t BOOTKEY3_2;  // off 0x000002c8
  __IO uint32_t BOOTKEY3_3;  // off 0x000002cc
  __IO uint32_t BOOTKEY3_4;  // off 0x000002d0
  __IO uint32_t BOOTKEY3_5;  // off 0x000002d4
  __IO uint32_t BOOTKEY3_6;  // off 0x000002d8
  __IO uint32_t BOOTKEY3_7;  // off 0x000002dc
  __IO uint32_t BOOTKEY3_8;  // off 0x000002e0
  __IO uint32_t BOOTKEY3_9;  // off 0x000002e4
  __IO uint32_t BOOTKEY3_10; // off 0x000002e8
  __IO uint32_t BOOTKEY3_11; // off 0x000002ec
  __IO uint32_t BOOTKEY3_12; // off 0x000002f0
  __IO uint32_t BOOTKEY3_13; // off 0x000002f4
  __IO uint32_t BOOTKEY3_14; // off 0x000002f8
  __IO uint32_t BOOTKEY3_15; // off 0x000002fc
  __IO uint32_t _pad5[3720];
  __IO uint32_t KEY1_0; // off 0x00003d20
  __IO uint32_t KEY1_1; // off 0x00003d24
  __IO uint32_t KEY1_2; // off 0x00003d28
  __IO uint32_t KEY1_3; // off 0x00003d2c
  __IO uint32_t KEY1_4; // off 0x00003d30
  __IO uint32_t KEY1_5; // off 0x00003d34
  __IO uint32_t KEY1_6; // off 0x00003d38
  __IO uint32_t KEY1_7; // off 0x00003d3c
  __IO uint32_t KEY2_0; // off 0x00003d40
  __IO uint32_t KEY2_1; // off 0x00003d44
  __IO uint32_t KEY2_2; // off 0x00003d48
  __IO uint32_t KEY2_3; // off 0x00003d4c
  __IO uint32_t KEY2_4; // off 0x00003d50
  __IO uint32_t KEY2_5; // off 0x00003d54
  __IO uint32_t KEY2_6; // off 0x00003d58
  __IO uint32_t KEY2_7; // off 0x00003d5c
  __IO uint32_t KEY3_0; // off 0x00003d60
  __IO uint32_t KEY3_1; // off 0x00003d64
  __IO uint32_t KEY3_2; // off 0x00003d68
  __IO uint32_t KEY3_3; // off 0x00003d6c
  __IO uint32_t KEY3_4; // off 0x00003d70
  __IO uint32_t KEY3_5; // off 0x00003d74
  __IO uint32_t KEY3_6; // off 0x00003d78
  __IO uint32_t KEY3_7; // off 0x00003d7c
  __IO uint32_t KEY4_0; // off 0x00003d80
  __IO uint32_t KEY4_1; // off 0x00003d84
  __IO uint32_t KEY4_2; // off 0x00003d88
  __IO uint32_t KEY4_3; // off 0x00003d8c
  __IO uint32_t KEY4_4; // off 0x00003d90
  __IO uint32_t KEY4_5; // off 0x00003d94
  __IO uint32_t KEY4_6; // off 0x00003d98
  __IO uint32_t KEY4_7; // off 0x00003d9c
  __IO uint32_t KEY5_0; // off 0x00003da0
  __IO uint32_t KEY5_1; // off 0x00003da4
  __IO uint32_t KEY5_2; // off 0x00003da8
  __IO uint32_t KEY5_3; // off 0x00003dac
  __IO uint32_t KEY5_4; // off 0x00003db0
  __IO uint32_t KEY5_5; // off 0x00003db4
  __IO uint32_t KEY5_6; // off 0x00003db8
  __IO uint32_t KEY5_7; // off 0x00003dbc
  __IO uint32_t KEY6_0; // off 0x00003dc0
  __IO uint32_t KEY6_1; // off 0x00003dc4
  __IO uint32_t KEY6_2; // off 0x00003dc8
  __IO uint32_t KEY6_3; // off 0x00003dcc
  __IO uint32_t KEY6_4; // off 0x00003dd0
  __IO uint32_t KEY6_5; // off 0x00003dd4
  __IO uint32_t KEY6_6; // off 0x00003dd8
  __IO uint32_t KEY6_7; // off 0x00003ddc
  __IO uint32_t _pad6;
  __IO uint32_t KEY1_VALID; // off 0x00003de4
  __IO uint32_t KEY2_VALID; // off 0x00003de8
  __IO uint32_t KEY3_VALID; // off 0x00003dec
  __IO uint32_t KEY4_VALID; // off 0x00003df0
  __IO uint32_t KEY5_VALID; // off 0x00003df4
  __IO uint32_t KEY6_VALID; // off 0x00003df8
  __IO uint32_t _pad7;
  __IO uint32_t PAGE0_LOCK0;  // off 0x00003e00
  __IO uint32_t PAGE0_LOCK1;  // off 0x00003e04
  __IO uint32_t PAGE1_LOCK0;  // off 0x00003e08
  __IO uint32_t PAGE1_LOCK1;  // off 0x00003e0c
  __IO uint32_t PAGE2_LOCK0;  // off 0x00003e10
  __IO uint32_t PAGE2_LOCK1;  // off 0x00003e14
  __IO uint32_t PAGE3_LOCK0;  // off 0x00003e18
  __IO uint32_t PAGE3_LOCK1;  // off 0x00003e1c
  __IO uint32_t PAGE4_LOCK0;  // off 0x00003e20
  __IO uint32_t PAGE4_LOCK1;  // off 0x00003e24
  __IO uint32_t PAGE5_LOCK0;  // off 0x00003e28
  __IO uint32_t PAGE5_LOCK1;  // off 0x00003e2c
  __IO uint32_t PAGE6_LOCK0;  // off 0x00003e30
  __IO uint32_t PAGE6_LOCK1;  // off 0x00003e34
  __IO uint32_t PAGE7_LOCK0;  // off 0x00003e38
  __IO uint32_t PAGE7_LOCK1;  // off 0x00003e3c
  __IO uint32_t PAGE8_LOCK0;  // off 0x00003e40
  __IO uint32_t PAGE8_LOCK1;  // off 0x00003e44
  __IO uint32_t PAGE9_LOCK0;  // off 0x00003e48
  __IO uint32_t PAGE9_LOCK1;  // off 0x00003e4c
  __IO uint32_t PAGE10_LOCK0; // off 0x00003e50
  __IO uint32_t PAGE10_LOCK1; // off 0x00003e54
  __IO uint32_t PAGE11_LOCK0; // off 0x00003e58
  __IO uint32_t PAGE11_LOCK1; // off 0x00003e5c
  __IO uint32_t PAGE12_LOCK0; // off 0x00003e60
  __IO uint32_t PAGE12_LOCK1; // off 0x00003e64
  __IO uint32_t PAGE13_LOCK0; // off 0x00003e68
  __IO uint32_t PAGE13_LOCK1; // off 0x00003e6c
  __IO uint32_t PAGE14_LOCK0; // off 0x00003e70
  __IO uint32_t PAGE14_LOCK1; // off 0x00003e74
  __IO uint32_t PAGE15_LOCK0; // off 0x00003e78
  __IO uint32_t PAGE15_LOCK1; // off 0x00003e7c
  __IO uint32_t PAGE16_LOCK0; // off 0x00003e80
  __IO uint32_t PAGE16_LOCK1; // off 0x00003e84
  __IO uint32_t PAGE17_LOCK0; // off 0x00003e88
  __IO uint32_t PAGE17_LOCK1; // off 0x00003e8c
  __IO uint32_t PAGE18_LOCK0; // off 0x00003e90
  __IO uint32_t PAGE18_LOCK1; // off 0x00003e94
  __IO uint32_t PAGE19_LOCK0; // off 0x00003e98
  __IO uint32_t PAGE19_LOCK1; // off 0x00003e9c
  __IO uint32_t PAGE20_LOCK0; // off 0x00003ea0
  __IO uint32_t PAGE20_LOCK1; // off 0x00003ea4
  __IO uint32_t PAGE21_LOCK0; // off 0x00003ea8
  __IO uint32_t PAGE21_LOCK1; // off 0x00003eac
  __IO uint32_t PAGE22_LOCK0; // off 0x00003eb0
  __IO uint32_t PAGE22_LOCK1; // off 0x00003eb4
  __IO uint32_t PAGE23_LOCK0; // off 0x00003eb8
  __IO uint32_t PAGE23_LOCK1; // off 0x00003ebc
  __IO uint32_t PAGE24_LOCK0; // off 0x00003ec0
  __IO uint32_t PAGE24_LOCK1; // off 0x00003ec4
  __IO uint32_t PAGE25_LOCK0; // off 0x00003ec8
  __IO uint32_t PAGE25_LOCK1; // off 0x00003ecc
  __IO uint32_t PAGE26_LOCK0; // off 0x00003ed0
  __IO uint32_t PAGE26_LOCK1; // off 0x00003ed4
  __IO uint32_t PAGE27_LOCK0; // off 0x00003ed8
  __IO uint32_t PAGE27_LOCK1; // off 0x00003edc
  __IO uint32_t PAGE28_LOCK0; // off 0x00003ee0
  __IO uint32_t PAGE28_LOCK1; // off 0x00003ee4
  __IO uint32_t PAGE29_LOCK0; // off 0x00003ee8
  __IO uint32_t PAGE29_LOCK1; // off 0x00003eec
  __IO uint32_t PAGE30_LOCK0; // off 0x00003ef0
  __IO uint32_t PAGE30_LOCK1; // off 0x00003ef4
  __IO uint32_t PAGE31_LOCK0; // off 0x00003ef8
  __IO uint32_t PAGE31_LOCK1; // off 0x00003efc
  __IO uint32_t PAGE32_LOCK0; // off 0x00003f00
  __IO uint32_t PAGE32_LOCK1; // off 0x00003f04
  __IO uint32_t PAGE33_LOCK0; // off 0x00003f08
  __IO uint32_t PAGE33_LOCK1; // off 0x00003f0c
  __IO uint32_t PAGE34_LOCK0; // off 0x00003f10
  __IO uint32_t PAGE34_LOCK1; // off 0x00003f14
  __IO uint32_t PAGE35_LOCK0; // off 0x00003f18
  __IO uint32_t PAGE35_LOCK1; // off 0x00003f1c
  __IO uint32_t PAGE36_LOCK0; // off 0x00003f20
  __IO uint32_t PAGE36_LOCK1; // off 0x00003f24
  __IO uint32_t PAGE37_LOCK0; // off 0x00003f28
  __IO uint32_t PAGE37_LOCK1; // off 0x00003f2c
  __IO uint32_t PAGE38_LOCK0; // off 0x00003f30
  __IO uint32_t PAGE38_LOCK1; // off 0x00003f34
  __IO uint32_t PAGE39_LOCK0; // off 0x00003f38
  __IO uint32_t PAGE39_LOCK1; // off 0x00003f3c
  __IO uint32_t PAGE40_LOCK0; // off 0x00003f40
  __IO uint32_t PAGE40_LOCK1; // off 0x00003f44
  __IO uint32_t PAGE41_LOCK0; // off 0x00003f48
  __IO uint32_t PAGE41_LOCK1; // off 0x00003f4c
  __IO uint32_t PAGE42_LOCK0; // off 0x00003f50
  __IO uint32_t PAGE42_LOCK1; // off 0x00003f54
  __IO uint32_t PAGE43_LOCK0; // off 0x00003f58
  __IO uint32_t PAGE43_LOCK1; // off 0x00003f5c
  __IO uint32_t PAGE44_LOCK0; // off 0x00003f60
  __IO uint32_t PAGE44_LOCK1; // off 0x00003f64
  __IO uint32_t PAGE45_LOCK0; // off 0x00003f68
  __IO uint32_t PAGE45_LOCK1; // off 0x00003f6c
  __IO uint32_t PAGE46_LOCK0; // off 0x00003f70
  __IO uint32_t PAGE46_LOCK1; // off 0x00003f74
  __IO uint32_t PAGE47_LOCK0; // off 0x00003f78
  __IO uint32_t PAGE47_LOCK1; // off 0x00003f7c
  __IO uint32_t PAGE48_LOCK0; // off 0x00003f80
  __IO uint32_t PAGE48_LOCK1; // off 0x00003f84
  __IO uint32_t PAGE49_LOCK0; // off 0x00003f88
  __IO uint32_t PAGE49_LOCK1; // off 0x00003f8c
  __IO uint32_t PAGE50_LOCK0; // off 0x00003f90
  __IO uint32_t PAGE50_LOCK1; // off 0x00003f94
  __IO uint32_t PAGE51_LOCK0; // off 0x00003f98
  __IO uint32_t PAGE51_LOCK1; // off 0x00003f9c
  __IO uint32_t PAGE52_LOCK0; // off 0x00003fa0
  __IO uint32_t PAGE52_LOCK1; // off 0x00003fa4
  __IO uint32_t PAGE53_LOCK0; // off 0x00003fa8
  __IO uint32_t PAGE53_LOCK1; // off 0x00003fac
  __IO uint32_t PAGE54_LOCK0; // off 0x00003fb0
  __IO uint32_t PAGE54_LOCK1; // off 0x00003fb4
  __IO uint32_t PAGE55_LOCK0; // off 0x00003fb8
  __IO uint32_t PAGE55_LOCK1; // off 0x00003fbc
  __IO uint32_t PAGE56_LOCK0; // off 0x00003fc0
  __IO uint32_t PAGE56_LOCK1; // off 0x00003fc4
  __IO uint32_t PAGE57_LOCK0; // off 0x00003fc8
  __IO uint32_t PAGE57_LOCK1; // off 0x00003fcc
  __IO uint32_t PAGE58_LOCK0; // off 0x00003fd0
  __IO uint32_t PAGE58_LOCK1; // off 0x00003fd4
  __IO uint32_t PAGE59_LOCK0; // off 0x00003fd8
  __IO uint32_t PAGE59_LOCK1; // off 0x00003fdc
  __IO uint32_t PAGE60_LOCK0; // off 0x00003fe0
  __IO uint32_t PAGE60_LOCK1; // off 0x00003fe4
  __IO uint32_t PAGE61_LOCK0; // off 0x00003fe8
  __IO uint32_t PAGE61_LOCK1; // off 0x00003fec
  __IO uint32_t PAGE62_LOCK0; // off 0x00003ff0
  __IO uint32_t PAGE62_LOCK1; // off 0x00003ff4
  __IO uint32_t PAGE63_LOCK0; // off 0x00003ff8
  __IO uint32_t PAGE63_LOCK1; // off 0x00003ffc
} OTP_DATA_RAW_TypeDef;
#define OTP_DATA_RAW_BASE 0x40134000
#define OTP_DATA_RAW ((OTP_DATA_RAW_TypeDef *)OTP_DATA_RAW_BASE)

typedef struct {
} TBMAN_TypeDef;
#define TBMAN_BASE 0x40160000
#define TBMAN ((TBMAN_TypeDef *)TBMAN_BASE)

typedef struct {
  __IO uint32_t SETUP_PACKET_LOW;        // off 0x00000000
  __IO uint32_t SETUP_PACKET_HIGH;       // off 0x00000004
  __IO uint32_t EP1_IN_CONTROL;          // off 0x00000008
  __IO uint32_t EP1_OUT_CONTROL;         // off 0x0000000c
  __IO uint32_t EP2_IN_CONTROL;          // off 0x00000010
  __IO uint32_t EP2_OUT_CONTROL;         // off 0x00000014
  __IO uint32_t EP3_IN_CONTROL;          // off 0x00000018
  __IO uint32_t EP3_OUT_CONTROL;         // off 0x0000001c
  __IO uint32_t EP4_IN_CONTROL;          // off 0x00000020
  __IO uint32_t EP4_OUT_CONTROL;         // off 0x00000024
  __IO uint32_t EP5_IN_CONTROL;          // off 0x00000028
  __IO uint32_t EP5_OUT_CONTROL;         // off 0x0000002c
  __IO uint32_t EP6_IN_CONTROL;          // off 0x00000030
  __IO uint32_t EP6_OUT_CONTROL;         // off 0x00000034
  __IO uint32_t EP7_IN_CONTROL;          // off 0x00000038
  __IO uint32_t EP7_OUT_CONTROL;         // off 0x0000003c
  __IO uint32_t EP8_IN_CONTROL;          // off 0x00000040
  __IO uint32_t EP8_OUT_CONTROL;         // off 0x00000044
  __IO uint32_t EP9_IN_CONTROL;          // off 0x00000048
  __IO uint32_t EP9_OUT_CONTROL;         // off 0x0000004c
  __IO uint32_t EP10_IN_CONTROL;         // off 0x00000050
  __IO uint32_t EP10_OUT_CONTROL;        // off 0x00000054
  __IO uint32_t EP11_IN_CONTROL;         // off 0x00000058
  __IO uint32_t EP11_OUT_CONTROL;        // off 0x0000005c
  __IO uint32_t EP12_IN_CONTROL;         // off 0x00000060
  __IO uint32_t EP12_OUT_CONTROL;        // off 0x00000064
  __IO uint32_t EP13_IN_CONTROL;         // off 0x00000068
  __IO uint32_t EP13_OUT_CONTROL;        // off 0x0000006c
  __IO uint32_t EP14_IN_CONTROL;         // off 0x00000070
  __IO uint32_t EP14_OUT_CONTROL;        // off 0x00000074
  __IO uint32_t EP15_IN_CONTROL;         // off 0x00000078
  __IO uint32_t EP15_OUT_CONTROL;        // off 0x0000007c
  __IO uint32_t EP0_IN_BUFFER_CONTROL;   // off 0x00000080
  __IO uint32_t EP0_OUT_BUFFER_CONTROL;  // off 0x00000084
  __IO uint32_t EP1_IN_BUFFER_CONTROL;   // off 0x00000088
  __IO uint32_t EP1_OUT_BUFFER_CONTROL;  // off 0x0000008c
  __IO uint32_t EP2_IN_BUFFER_CONTROL;   // off 0x00000090
  __IO uint32_t EP2_OUT_BUFFER_CONTROL;  // off 0x00000094
  __IO uint32_t EP3_IN_BUFFER_CONTROL;   // off 0x00000098
  __IO uint32_t EP3_OUT_BUFFER_CONTROL;  // off 0x0000009c
  __IO uint32_t EP4_IN_BUFFER_CONTROL;   // off 0x000000a0
  __IO uint32_t EP4_OUT_BUFFER_CONTROL;  // off 0x000000a4
  __IO uint32_t EP5_IN_BUFFER_CONTROL;   // off 0x000000a8
  __IO uint32_t EP5_OUT_BUFFER_CONTROL;  // off 0x000000ac
  __IO uint32_t EP6_IN_BUFFER_CONTROL;   // off 0x000000b0
  __IO uint32_t EP6_OUT_BUFFER_CONTROL;  // off 0x000000b4
  __IO uint32_t EP7_IN_BUFFER_CONTROL;   // off 0x000000b8
  __IO uint32_t EP7_OUT_BUFFER_CONTROL;  // off 0x000000bc
  __IO uint32_t EP8_IN_BUFFER_CONTROL;   // off 0x000000c0
  __IO uint32_t EP8_OUT_BUFFER_CONTROL;  // off 0x000000c4
  __IO uint32_t EP9_IN_BUFFER_CONTROL;   // off 0x000000c8
  __IO uint32_t EP9_OUT_BUFFER_CONTROL;  // off 0x000000cc
  __IO uint32_t EP10_IN_BUFFER_CONTROL;  // off 0x000000d0
  __IO uint32_t EP10_OUT_BUFFER_CONTROL; // off 0x000000d4
  __IO uint32_t EP11_IN_BUFFER_CONTROL;  // off 0x000000d8
  __IO uint32_t EP11_OUT_BUFFER_CONTROL; // off 0x000000dc
  __IO uint32_t EP12_IN_BUFFER_CONTROL;  // off 0x000000e0
  __IO uint32_t EP12_OUT_BUFFER_CONTROL; // off 0x000000e4
  __IO uint32_t EP13_IN_BUFFER_CONTROL;  // off 0x000000e8
  __IO uint32_t EP13_OUT_BUFFER_CONTROL; // off 0x000000ec
  __IO uint32_t EP14_IN_BUFFER_CONTROL;  // off 0x000000f0
  __IO uint32_t EP14_OUT_BUFFER_CONTROL; // off 0x000000f4
  __IO uint32_t EP15_IN_BUFFER_CONTROL;  // off 0x000000f8
  __IO uint32_t EP15_OUT_BUFFER_CONTROL; // off 0x000000fc
} USB_DPRAM_TypeDef;
#define USB_DPRAM_BASE 0x50100000
#define USB_DPRAM ((USB_DPRAM_TypeDef *)USB_DPRAM_BASE)
